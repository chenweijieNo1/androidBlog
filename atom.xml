<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>androidBlog</title>
  
  
  <link href="/androidBlog/atom.xml" rel="self"/>
  
  <link href="https://ericchenwj.github.io/androidBlog/"/>
  <updated>2017-12-26T07:59:18.325Z</updated>
  <id>https://ericchenwj.github.io/androidBlog/</id>
  
  <author>
    <name>Ericchen</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>ViewPager使用详解</title>
    <link href="https://ericchenwj.github.io/androidBlog/2017/12/21/ViewPager%E4%BD%BF%E7%94%A8%E8%AF%A6%E8%A7%A3/"/>
    <id>https://ericchenwj.github.io/androidBlog/2017/12/21/ViewPager使用详解/</id>
    <published>2017-12-21T06:11:00.000Z</published>
    <updated>2017-12-26T07:59:18.325Z</updated>
    
    <content type="html"><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>在开发中ViewPager是不可或缺的控件，引导页、轮播图、卡片画廊等效果大多数是用ViewPager来实现，该文章主要是梳理下ViewPager的用法。<br>主要包括以下内容：</p><ul><li>ViewPager的简介与作用</li><li>ViewPager的适配器</li><li>自定义ViewPager的切换效果</li><li>ViewPager的基础使用</li><li>ViewPager结合第三方库实现小圆点指示器效果</li><li>ViewPager结合design库实现tab切换</li><li>基于ViewPager实现广告轮播控件</li></ul><h4 id="1、ViewPager的简介与作用"><a href="#1、ViewPager的简介与作用" class="headerlink" title="1、ViewPager的简介与作用"></a>1、ViewPager的简介与作用</h4><p>ViewPager是android扩展包v4包中的类，继承自ViewGroup，它是一个容器类，可以添加其他的view，实现多个view左右切换、滑动，这个控件大家使用比较多，也比较熟悉了，下面说下常用的几个方法：</p><ul><li>setAdapter(PagerAdapter adapter) 设置适配器</li><li>setOffscreenPageLimit(int limit) 设置缓存的页面个数，默认是1个</li><li>setCurrentItem(int item) 跳转到某个页面</li><li>setOnPageChangeListener(…) 设置页面滑动时的监听器</li><li>setPageTransformer(…) 设置页面切换时的动画效果</li><li>setPageMargin(int margin) 设置不同页面之间的间隔</li></ul><h3 id="2、ViewPager的适配器"><a href="#2、ViewPager的适配器" class="headerlink" title="2、ViewPager的适配器"></a>2、ViewPager的适配器</h3><p>ViewPager需要设置PagerAdapter来完成页面和数据的绑定，这个PagerAdapter是个基类，我们经常使用它的两个子类：FragmentPagerAdapter和FragmentStatePagerAdapter，先说说它们之间的使用区别吧。<br><a id="more"></a><br>PagerAdapter是个抽象的适配器，如果继承自该类，至少需要实现 instantiateItem(), destroyItem(), getCount() 以及 isViewFromObject()。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">public class AdapterViewpager extends PagerAdapter &#123;</div><div class="line">    private List&lt;View&gt; mViewList;</div><div class="line"></div><div class="line">    public AdapterViewpager(List&lt;View&gt; mViewList) &#123;</div><div class="line">        this.mViewList = mViewList;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public int getCount() &#123;//必须实现 数据个数</div><div class="line">        return mViewList.size();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public boolean isViewFromObject(View view, Object object) &#123;//必须实现 这个方法用于判断是否由对象生成界面</div><div class="line">        return view == object;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public Object instantiateItem(ViewGroup container, int position) &#123;//必须实现，实例化 要显示的页面或需要缓存的页面，进行布局的初始化</div><div class="line">        container.addView(mViewList.get(position));</div><div class="line">        return mViewList.get(position);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void destroyItem(ViewGroup container, int position, Object object) &#123;//必须实现，销毁</div><div class="line">        container.removeView(mViewList.get(position));</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>FragmentPagerAdapter和FragmentStatePagerAdapter更专注于每一项是fragment的情况，FragmentPagerAdpater将每一个页面表示为一个fragment，并且每一个fragment都将会保存到FragmentManger当中，当用户没可能再次回到页面的时候，FragmentManager才会将这个fragment销毁，对于不再需要的fragment，选择调用onDetach()方法，仅销毁视图，但不会销毁fragment实例；FragmentStatePagerAdapter会销毁不再需要的fragment，当当前事务提交以后，会彻底的将fragment从当前activity的FragmentManger中移除，销毁时会将其onSaveInstance(Bundle outState)中Bundle保存下来，当用户切换回来，可以通过该bundle恢复生成新的fragment.<br>总的来说，FragmentStatePagerAdapter更省内存，但花时间，一般情况下，如果只有3、4个tab，可以选择FragmentPagerAdapter；如果展示数量特别多的条目，可以考虑FragmentStatePagerAdapter.</p><p>两者的实现方式一样，如下所示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">public class AdapterFragment extends FragmentPagerAdapter &#123;</div><div class="line">    private List&lt;Fragment&gt; mFragments;</div><div class="line"></div><div class="line">    public AdapterFragment(FragmentManager fm, List&lt;Fragment&gt; mFragments) &#123;</div><div class="line">        super(fm);</div><div class="line">        this.mFragments = mFragments;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public Fragment getItem(int position) &#123;//必须实现</div><div class="line">        return mFragments.get(position);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public int getCount() &#123;//必须实现</div><div class="line">        return mFragments.size();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public CharSequence getPageTitle(int position) &#123;//选择性实现</div><div class="line">        return mFragments.get(position).getClass().getSimpleName();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="3、自定义ViewPager的切换效果"><a href="#3、自定义ViewPager的切换效果" class="headerlink" title="3、自定义ViewPager的切换效果"></a>3、自定义ViewPager的切换效果</h3><p>官方提供了一个内部接口ViewPager.PageTransformer来供我们实现自定义切换动效，这个接口只提供一个方法：public void transformPage(View view,float position)</p><p>transformPage有两个参数，一个是view，当前要设置动效的页面，这个页面不单单是当前显示的页面，即将滑出的页面，即将滑入的页面，已经隐藏的页面，但如何分辨View指哪个页面呢？这就需要第二个参数position来辨别。</p><p>从doc注释来看，当前选中的item的position为0，被选中item的前一个为-1，后一个为1，这前提是没有设置pageMargin，如果设置了pageMargin，前后item的position需要分别加上或减去（前减后加）一个偏移量（pageMargin / pageWidth）</p><p>滑动界面时postion是动态变化的，假设有三个页面view1，view2，view3从左至右在viewPager中显示：</p><ul><li><p>往左滑动时：view1，view2，view3的position都是不断变小的。<br>view1的position: 0 → -1 → 负无穷大<br>view2的position: 1 → 0 → -1<br>view3的position: 1 → 0</p></li><li><p>往右滑动时：view1，view2，view3的position都是不断变大的。<br>view1的position: -1 → 0<br>view2的position: -1 → 0 → 1<br>view3的position: 0 → 1→ 正无穷大</p></li></ul><p>当position是正负无穷大时view就离开屏幕视野了。因此最核心的控制逻辑是在[-1,0]和(0,1]这两个区间，通过设置透明度，平移，旋转，缩放等动画组合可以实现各式各样的页面变化效果。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line">public class ZoomOutPageTransformer implements ViewPager.PageTransformer &#123;</div><div class="line">  private static final float MIN_SCALE = 0.85f;</div><div class="line">  private static final float MIN_ALPHA = 0.5f;</div><div class="line"></div><div class="line">  @SuppressLint(&quot;NewApi&quot;)</div><div class="line">  public void transformPage(View view, float position) &#123;</div><div class="line">      int pageWidth = view.getWidth();</div><div class="line">      int pageHeight = view.getHeight();</div><div class="line"></div><div class="line">      Log.e(&quot;TAG&quot;, view + &quot; , &quot; + position + &quot;&quot;);</div><div class="line"></div><div class="line">      if (position &lt; -1) &#123; // [-Infinity,-1)</div><div class="line">          // This page is way off-screen to the left.</div><div class="line">          view.setAlpha(0);</div><div class="line"></div><div class="line">      &#125; else if (position &lt;= 1) </div><div class="line">      &#123; // [-1,1]</div><div class="line">          // Modify the default slide transition to shrink the page as well</div><div class="line">          float scaleFactor = Math.max(MIN_SCALE, 1 - Math.abs(position));</div><div class="line">          float vertMargin = pageHeight * (1 - scaleFactor) / 2;</div><div class="line">          float horzMargin = pageWidth * (1 - scaleFactor) / 2;</div><div class="line">          if (position &lt; 0) &#123;</div><div class="line">              view.setTranslationX(horzMargin - vertMargin / 2);</div><div class="line">          &#125; else &#123;</div><div class="line">              view.setTranslationX(-horzMargin + vertMargin / 2);</div><div class="line">          &#125;</div><div class="line"></div><div class="line">          // Scale the page down (between MIN_SCALE and 1)</div><div class="line">          view.setScaleX(scaleFactor);</div><div class="line">          view.setScaleY(scaleFactor);</div><div class="line"></div><div class="line">          // Fade the page relative to its size.</div><div class="line">          view.setAlpha(MIN_ALPHA + (scaleFactor - MIN_SCALE)</div><div class="line">                  / (1 - MIN_SCALE) * (1 - MIN_ALPHA));</div><div class="line"></div><div class="line">      &#125; else &#123; // (1,+Infinity]</div><div class="line">          // This page is way off-screen to the right.</div><div class="line">          view.setAlpha(0);</div><div class="line">      &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="4、ViewPager的简单使用"><a href="#4、ViewPager的简单使用" class="headerlink" title="4、ViewPager的简单使用"></a>4、ViewPager的简单使用</h3><ul><li><p>布局文件声明控件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;!--填充整个页面的ViewPager--&gt;</div><div class="line">   &lt;android.support.v4.view.ViewPager</div><div class="line">      android:id=&quot;@+id/viewpager&quot;</div><div class="line">      android:layout_width=&quot;match_parent&quot;</div><div class="line">      android:layout_height=&quot;match_parent&quot;/&gt;</div></pre></td></tr></table></figure></li><li><p>代码中设置数据</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">ViewPager viewPager = (ViewPager) findViewById(R.id.viewpager);</div><div class="line">自定义类实现PagerAdapter，填充显示数据</div><div class="line">viewPager.setAdapter(new MyAdapter());</div></pre></td></tr></table></figure></li></ul><h3 id="5、ViewPager结合第三方库实现小圆点指示器效果"><a href="#5、ViewPager结合第三方库实现小圆点指示器效果" class="headerlink" title="5、ViewPager结合第三方库实现小圆点指示器效果"></a>5、ViewPager结合第三方库实现小圆点指示器效果</h3><p><a href="https://github.com/ongakuer/CircleIndicator" target="_blank" rel="external">https://github.com/ongakuer/CircleIndicator</a></p><h3 id="6、ViewPager结合design库实现tab切换"><a href="#6、ViewPager结合design库实现tab切换" class="headerlink" title="6、ViewPager结合design库实现tab切换"></a>6、ViewPager结合design库实现tab切换</h3><p><a href="http://www.jcodecraeer.com/a/anzhuokaifa/androidkaifa/2015/0731/3247.html" target="_blank" rel="external">http://www.jcodecraeer.com/a/anzhuokaifa/androidkaifa/2015/0731/3247.html</a></p><h3 id="7、基于ViewPager实现广告轮播控件"><a href="#7、基于ViewPager实现广告轮播控件" class="headerlink" title="7、基于ViewPager实现广告轮播控件"></a>7、基于ViewPager实现广告轮播控件</h3><p><a href="https://github.com/daimajia/AndroidImageSlider" target="_blank" rel="external">https://github.com/daimajia/AndroidImageSlider</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h4&gt;&lt;p&gt;在开发中ViewPager是不可或缺的控件，引导页、轮播图、卡片画廊等效果大多数是用ViewPager来实现，该文章主要是梳理下ViewPager的用法。&lt;br&gt;主要包括以下内容：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ViewPager的简介与作用&lt;/li&gt;
&lt;li&gt;ViewPager的适配器&lt;/li&gt;
&lt;li&gt;自定义ViewPager的切换效果&lt;/li&gt;
&lt;li&gt;ViewPager的基础使用&lt;/li&gt;
&lt;li&gt;ViewPager结合第三方库实现小圆点指示器效果&lt;/li&gt;
&lt;li&gt;ViewPager结合design库实现tab切换&lt;/li&gt;
&lt;li&gt;基于ViewPager实现广告轮播控件&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;1、ViewPager的简介与作用&quot;&gt;&lt;a href=&quot;#1、ViewPager的简介与作用&quot; class=&quot;headerlink&quot; title=&quot;1、ViewPager的简介与作用&quot;&gt;&lt;/a&gt;1、ViewPager的简介与作用&lt;/h4&gt;&lt;p&gt;ViewPager是android扩展包v4包中的类，继承自ViewGroup，它是一个容器类，可以添加其他的view，实现多个view左右切换、滑动，这个控件大家使用比较多，也比较熟悉了，下面说下常用的几个方法：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;setAdapter(PagerAdapter adapter) 设置适配器&lt;/li&gt;
&lt;li&gt;setOffscreenPageLimit(int limit) 设置缓存的页面个数，默认是1个&lt;/li&gt;
&lt;li&gt;setCurrentItem(int item) 跳转到某个页面&lt;/li&gt;
&lt;li&gt;setOnPageChangeListener(…) 设置页面滑动时的监听器&lt;/li&gt;
&lt;li&gt;setPageTransformer(…) 设置页面切换时的动画效果&lt;/li&gt;
&lt;li&gt;setPageMargin(int margin) 设置不同页面之间的间隔&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;2、ViewPager的适配器&quot;&gt;&lt;a href=&quot;#2、ViewPager的适配器&quot; class=&quot;headerlink&quot; title=&quot;2、ViewPager的适配器&quot;&gt;&lt;/a&gt;2、ViewPager的适配器&lt;/h3&gt;&lt;p&gt;ViewPager需要设置PagerAdapter来完成页面和数据的绑定，这个PagerAdapter是个基类，我们经常使用它的两个子类：FragmentPagerAdapter和FragmentStatePagerAdapter，先说说它们之间的使用区别吧。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="android控件使用" scheme="https://ericchenwj.github.io/androidBlog/categories/android%E6%8E%A7%E4%BB%B6%E4%BD%BF%E7%94%A8/"/>
    
    
      <category term="android控件使用" scheme="https://ericchenwj.github.io/androidBlog/tags/android%E6%8E%A7%E4%BB%B6%E4%BD%BF%E7%94%A8/"/>
    
  </entry>
  
  <entry>
    <title>Android常用工具栏</title>
    <link href="https://ericchenwj.github.io/androidBlog/2017/12/19/Android%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7%E7%B1%BB/"/>
    <id>https://ericchenwj.github.io/androidBlog/2017/12/19/Android常用工具类/</id>
    <published>2017-12-19T06:36:00.000Z</published>
    <updated>2017-12-22T06:12:39.078Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1、日志工具类"><a href="#1、日志工具类" class="headerlink" title="1、日志工具类"></a>1、日志工具类</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div></pre></td><td class="code"><pre><div class="line">import android.util.Log;  </div><div class="line">  </div><div class="line">/** </div><div class="line"> * Log统一管理类 </div><div class="line"> *  </div><div class="line"> */  </div><div class="line">public class LogUtils  </div><div class="line">&#123;  </div><div class="line">  </div><div class="line">    private LogUtils()  </div><div class="line">    &#123;  </div><div class="line">        /* cannot be instantiated */  </div><div class="line">        throw new UnsupportedOperationException(&quot;cannot be instantiated&quot;);  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    public static boolean isDebug = true;// 是否需要打印bug，可以在application的onCreate函数里面初始化  </div><div class="line">    private static final String TAG = &quot;LogUtil&quot;;  </div><div class="line">  </div><div class="line">    // 下面四个是默认tag的函数  </div><div class="line">    public static void i(String msg)  </div><div class="line">    &#123;  </div><div class="line">        if (isDebug)  </div><div class="line">            Log.i(TAG, msg);  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    public static void d(String msg)  </div><div class="line">    &#123;  </div><div class="line">        if (isDebug)  </div><div class="line">            Log.d(TAG, msg);  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    public static void e(String msg)  </div><div class="line">    &#123;  </div><div class="line">        if (isDebug)  </div><div class="line">            Log.e(TAG, msg);  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    public static void v(String msg)  </div><div class="line">    &#123;  </div><div class="line">        if (isDebug)  </div><div class="line">            Log.v(TAG, msg);  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    // 下面是传入自定义tag的函数  </div><div class="line">    public static void i(String tag, String msg)  </div><div class="line">    &#123;  </div><div class="line">        if (isDebug)  </div><div class="line">            Log.i(tag, msg);  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    public static void d(String tag, String msg)  </div><div class="line">    &#123;  </div><div class="line">        if (isDebug)  </div><div class="line">            Log.i(tag, msg);  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    public static void e(String tag, String msg)  </div><div class="line">    &#123;  </div><div class="line">        if (isDebug)  </div><div class="line">            Log.i(tag, msg);  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    public static void v(String tag, String msg)  </div><div class="line">    &#123;  </div><div class="line">        if (isDebug)  </div><div class="line">            Log.i(tag, msg);  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="2、Toast管理类"><a href="#2、Toast管理类" class="headerlink" title="2、Toast管理类"></a>2、Toast管理类</h3><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div></pre></td><td class="code"><pre><div class="line">import android.content.Context;  </div><div class="line">import android.widget.Toast;  </div><div class="line">  </div><div class="line">/** </div><div class="line"> * Toast统一管理类 </div><div class="line"> *  </div><div class="line"> */  </div><div class="line">public class ToastUtils  </div><div class="line">&#123;  </div><div class="line">  </div><div class="line">    private ToastUtils()  </div><div class="line">    &#123;  </div><div class="line">        /* cannot be instantiated */  </div><div class="line">        throw new UnsupportedOperationException(&quot;cannot be instantiated&quot;);  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    public static boolean isShow = true;  </div><div class="line">  </div><div class="line">    /** </div><div class="line">     * 短时间显示Toast </div><div class="line">     *  </div><div class="line">     * @param context </div><div class="line">     * @param message </div><div class="line">     */  </div><div class="line">    public static void showShort(Context context, CharSequence message)  </div><div class="line">    &#123;  </div><div class="line">        if (isShow)  </div><div class="line">            Toast.makeText(context, message, Toast.LENGTH_SHORT).show();  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    /** </div><div class="line">     * 短时间显示Toast </div><div class="line">     *  </div><div class="line">     * @param context </div><div class="line">     * @param message </div><div class="line">     */  </div><div class="line">    public static void showShort(Context context, int message)  </div><div class="line">    &#123;  </div><div class="line">        if (isShow)  </div><div class="line">            Toast.makeText(context, message, Toast.LENGTH_SHORT).show();  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    /** </div><div class="line">     * 长时间显示Toast </div><div class="line">     *  </div><div class="line">     * @param context </div><div class="line">     * @param message </div><div class="line">     */  </div><div class="line">    public static void showLong(Context context, CharSequence message)  </div><div class="line">    &#123;  </div><div class="line">        if (isShow)  </div><div class="line">            Toast.makeText(context, message, Toast.LENGTH_LONG).show();  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    /** </div><div class="line">     * 长时间显示Toast </div><div class="line">     *  </div><div class="line">     * @param context </div><div class="line">     * @param message </div><div class="line">     */  </div><div class="line">    public static void showLong(Context context, int message)  </div><div class="line">    &#123;  </div><div class="line">        if (isShow)  </div><div class="line">            Toast.makeText(context, message, Toast.LENGTH_LONG).show();  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    /** </div><div class="line">     * 自定义显示Toast时间 </div><div class="line">     *  </div><div class="line">     * @param context </div><div class="line">     * @param message </div><div class="line">     * @param duration </div><div class="line">     */  </div><div class="line">    public static void show(Context context, CharSequence message, int duration)  </div><div class="line">    &#123;  </div><div class="line">        if (isShow)  </div><div class="line">            Toast.makeText(context, message, duration).show();  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    /** </div><div class="line">     * 自定义显示Toast时间 </div><div class="line">     *  </div><div class="line">     * @param context </div><div class="line">     * @param message </div><div class="line">     * @param duration </div><div class="line">     */  </div><div class="line">    public static void show(Context context, int message, int duration)  </div><div class="line">    &#123;  </div><div class="line">        if (isShow)  </div><div class="line">            Toast.makeText(context, message, duration).show();  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="3、SharedPreferences封装类"><a href="#3、SharedPreferences封装类" class="headerlink" title="3、SharedPreferences封装类"></a>3、SharedPreferences封装类</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div></pre></td><td class="code"><pre><div class="line">import java.lang.reflect.InvocationTargetException;  </div><div class="line">import java.lang.reflect.Method;  </div><div class="line">import java.util.Map;  </div><div class="line">  </div><div class="line">import android.content.Context;  </div><div class="line">import android.content.SharedPreferences;  </div><div class="line">  </div><div class="line">public class SPUtils  </div><div class="line">&#123;  </div><div class="line">    /** </div><div class="line">     * 保存在手机里面的文件名 </div><div class="line">     */  </div><div class="line">    public static final String FILE_NAME = &quot;share_data&quot;;  </div><div class="line">  </div><div class="line">    /** </div><div class="line">     * 保存数据的方法，我们需要拿到保存数据的具体类型，然后根据类型调用不同的保存方法 </div><div class="line">     *  </div><div class="line">     * @param context </div><div class="line">     * @param key </div><div class="line">     * @param object </div><div class="line">     */  </div><div class="line">    public static void put(Context context, String key, Object object)  </div><div class="line">    &#123;  </div><div class="line">  </div><div class="line">        SharedPreferences sp = context.getSharedPreferences(FILE_NAME,  </div><div class="line">                Context.MODE_PRIVATE);  </div><div class="line">        SharedPreferences.Editor editor = sp.edit();  </div><div class="line">  </div><div class="line">        if (object instanceof String)  </div><div class="line">        &#123;  </div><div class="line">            editor.putString(key, (String) object);  </div><div class="line">        &#125; else if (object instanceof Integer)  </div><div class="line">        &#123;  </div><div class="line">            editor.putInt(key, (Integer) object);  </div><div class="line">        &#125; else if (object instanceof Boolean)  </div><div class="line">        &#123;  </div><div class="line">            editor.putBoolean(key, (Boolean) object);  </div><div class="line">        &#125; else if (object instanceof Float)  </div><div class="line">        &#123;  </div><div class="line">            editor.putFloat(key, (Float) object);  </div><div class="line">        &#125; else if (object instanceof Long)  </div><div class="line">        &#123;  </div><div class="line">            editor.putLong(key, (Long) object);  </div><div class="line">        &#125; else  </div><div class="line">        &#123;  </div><div class="line">            editor.putString(key, object.toString());  </div><div class="line">        &#125;  </div><div class="line">  </div><div class="line">        SharedPreferencesCompat.apply(editor);  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    /** </div><div class="line">     * 得到保存数据的方法，我们根据默认值得到保存的数据的具体类型，然后调用相对于的方法获取值 </div><div class="line">     *  </div><div class="line">     * @param context </div><div class="line">     * @param key </div><div class="line">     * @param defaultObject </div><div class="line">     * @return </div><div class="line">     */  </div><div class="line">    public static Object get(Context context, String key, Object defaultObject)  </div><div class="line">    &#123;  </div><div class="line">        SharedPreferences sp = context.getSharedPreferences(FILE_NAME,  </div><div class="line">                Context.MODE_PRIVATE);  </div><div class="line">  </div><div class="line">        if (defaultObject instanceof String)  </div><div class="line">        &#123;  </div><div class="line">            return sp.getString(key, (String) defaultObject);  </div><div class="line">        &#125; else if (defaultObject instanceof Integer)  </div><div class="line">        &#123;  </div><div class="line">            return sp.getInt(key, (Integer) defaultObject);  </div><div class="line">        &#125; else if (defaultObject instanceof Boolean)  </div><div class="line">        &#123;  </div><div class="line">            return sp.getBoolean(key, (Boolean) defaultObject);  </div><div class="line">        &#125; else if (defaultObject instanceof Float)  </div><div class="line">        &#123;  </div><div class="line">            return sp.getFloat(key, (Float) defaultObject);  </div><div class="line">        &#125; else if (defaultObject instanceof Long)  </div><div class="line">        &#123;  </div><div class="line">            return sp.getLong(key, (Long) defaultObject);  </div><div class="line">        &#125;  </div><div class="line">  </div><div class="line">        return null;  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    /** </div><div class="line">     * 移除某个key值已经对应的值 </div><div class="line">     * @param context </div><div class="line">     * @param key </div><div class="line">     */  </div><div class="line">    public static void remove(Context context, String key)  </div><div class="line">    &#123;  </div><div class="line">        SharedPreferences sp = context.getSharedPreferences(FILE_NAME,  </div><div class="line">                Context.MODE_PRIVATE);  </div><div class="line">        SharedPreferences.Editor editor = sp.edit();  </div><div class="line">        editor.remove(key);  </div><div class="line">        SharedPreferencesCompat.apply(editor);  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    /** </div><div class="line">     * 清除所有数据 </div><div class="line">     * @param context </div><div class="line">     */  </div><div class="line">    public static void clear(Context context)  </div><div class="line">    &#123;  </div><div class="line">        SharedPreferences sp = context.getSharedPreferences(FILE_NAME,  </div><div class="line">                Context.MODE_PRIVATE);  </div><div class="line">        SharedPreferences.Editor editor = sp.edit();  </div><div class="line">        editor.clear();  </div><div class="line">        SharedPreferencesCompat.apply(editor);  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    /** </div><div class="line">     * 查询某个key是否已经存在 </div><div class="line">     * @param context </div><div class="line">     * @param key </div><div class="line">     * @return </div><div class="line">     */  </div><div class="line">    public static boolean contains(Context context, String key)  </div><div class="line">    &#123;  </div><div class="line">        SharedPreferences sp = context.getSharedPreferences(FILE_NAME,  </div><div class="line">                Context.MODE_PRIVATE);  </div><div class="line">        return sp.contains(key);  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    /** </div><div class="line">     * 返回所有的键值对 </div><div class="line">     *  </div><div class="line">     * @param context </div><div class="line">     * @return </div><div class="line">     */  </div><div class="line">    public static Map&lt;String, ?&gt; getAll(Context context)  </div><div class="line">    &#123;  </div><div class="line">        SharedPreferences sp = context.getSharedPreferences(FILE_NAME,  </div><div class="line">                Context.MODE_PRIVATE);  </div><div class="line">        return sp.getAll();  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    /** </div><div class="line">     * 创建一个解决SharedPreferencesCompat.apply方法的一个兼容类 </div><div class="line">     *  </div><div class="line">     * @author zhy </div><div class="line">     *  </div><div class="line">     */  </div><div class="line">    private static class SharedPreferencesCompat  </div><div class="line">    &#123;  </div><div class="line">        private static final Method sApplyMethod = findApplyMethod();  </div><div class="line">  </div><div class="line">        /** </div><div class="line">         * 反射查找apply的方法 </div><div class="line">         *  </div><div class="line">         * @return </div><div class="line">         */  </div><div class="line">        @SuppressWarnings(&#123; &quot;unchecked&quot;, &quot;rawtypes&quot; &#125;)  </div><div class="line">        private static Method findApplyMethod()  </div><div class="line">        &#123;  </div><div class="line">            try  </div><div class="line">            &#123;  </div><div class="line">                Class clz = SharedPreferences.Editor.class;  </div><div class="line">                return clz.getMethod(&quot;apply&quot;);  </div><div class="line">            &#125; catch (NoSuchMethodException e)  </div><div class="line">            &#123;  </div><div class="line">            &#125;  </div><div class="line">  </div><div class="line">            return null;  </div><div class="line">        &#125;  </div><div class="line">  </div><div class="line">        /** </div><div class="line">         * 如果找到则使用apply执行，否则使用commit </div><div class="line">         *  </div><div class="line">         * @param editor </div><div class="line">         */  </div><div class="line">        public static void apply(SharedPreferences.Editor editor)  </div><div class="line">        &#123;  </div><div class="line">            try  </div><div class="line">            &#123;  </div><div class="line">                if (sApplyMethod != null)  </div><div class="line">                &#123;  </div><div class="line">                    sApplyMethod.invoke(editor);  </div><div class="line">                    return;  </div><div class="line">                &#125;  </div><div class="line">            &#125; catch (IllegalArgumentException e)  </div><div class="line">            &#123;  </div><div class="line">            &#125; catch (IllegalAccessException e)  </div><div class="line">            &#123;  </div><div class="line">            &#125; catch (InvocationTargetException e)  </div><div class="line">            &#123;  </div><div class="line">            &#125;  </div><div class="line">            editor.commit();  </div><div class="line">        &#125;  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure><p>注意一点，里面所有的commit操作使用了SharedPreferencesCompat.apply进行了替代，目的是尽可能的使用apply代替commit</p><p>首先说下为什么，因为commit方法是同步的，并且我们很多时候的commit操作都是UI线程中，毕竟是IO操作，尽可能异步；</p><p>所以我们使用apply进行替代，apply异步的进行写入；</p><p>但是apply相当于commit来说是new API呢，为了更好的兼容，我们做了适配；</p><h3 id="4、单位转换类"><a href="#4、单位转换类" class="headerlink" title="4、单位转换类"></a>4、单位转换类</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div></pre></td><td class="code"><pre><div class="line">import android.content.Context;  </div><div class="line">import android.util.TypedValue;  </div><div class="line">  </div><div class="line">/** </div><div class="line"> * 常用单位转换的辅助类 </div><div class="line"> *  </div><div class="line"> *  </div><div class="line"> *  </div><div class="line"> */  </div><div class="line">public class DensityUtils  </div><div class="line">&#123;  </div><div class="line">    private DensityUtils()  </div><div class="line">    &#123;  </div><div class="line">        /* cannot be instantiated */  </div><div class="line">        throw new UnsupportedOperationException(&quot;cannot be instantiated&quot;);  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    /** </div><div class="line">     * dp转px </div><div class="line">     *  </div><div class="line">     * @param context </div><div class="line">     * @param val </div><div class="line">     * @return </div><div class="line">     */  </div><div class="line">    public static int dp2px(Context context, float dpVal)  </div><div class="line">    &#123;  </div><div class="line">        return (int) TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP,  </div><div class="line">                dpVal, context.getResources().getDisplayMetrics());  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    /** </div><div class="line">     * sp转px </div><div class="line">     *  </div><div class="line">     * @param context </div><div class="line">     * @param val </div><div class="line">     * @return </div><div class="line">     */  </div><div class="line">    public static int sp2px(Context context, float spVal)  </div><div class="line">    &#123;  </div><div class="line">        return (int) TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_SP,  </div><div class="line">                spVal, context.getResources().getDisplayMetrics());  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    /** </div><div class="line">     * px转dp </div><div class="line">     *  </div><div class="line">     * @param context </div><div class="line">     * @param pxVal </div><div class="line">     * @return </div><div class="line">     */  </div><div class="line">    public static float px2dp(Context context, float pxVal)  </div><div class="line">    &#123;  </div><div class="line">        final float scale = context.getResources().getDisplayMetrics().density;  </div><div class="line">        return (pxVal / scale);  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    /** </div><div class="line">     * px转sp </div><div class="line">     *  </div><div class="line">     * @param fontScale </div><div class="line">     * @param pxVal </div><div class="line">     * @return </div><div class="line">     */  </div><div class="line">    public static float px2sp(Context context, float pxVal)  </div><div class="line">    &#123;  </div><div class="line">        return (pxVal / context.getResources().getDisplayMetrics().scaledDensity);  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="5、SD卡相关辅助类"><a href="#5、SD卡相关辅助类" class="headerlink" title="5、SD卡相关辅助类"></a>5、SD卡相关辅助类</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div></pre></td><td class="code"><pre><div class="line">import java.io.File;  </div><div class="line">  </div><div class="line">import android.os.Environment;  </div><div class="line">import android.os.StatFs;  </div><div class="line">  </div><div class="line">/** </div><div class="line"> * SD卡相关的辅助类 </div><div class="line"> *  </div><div class="line"> *  </div><div class="line"> *  </div><div class="line"> */  </div><div class="line">public class SDCardUtils  </div><div class="line">&#123;  </div><div class="line">    private SDCardUtils()  </div><div class="line">    &#123;  </div><div class="line">        /* cannot be instantiated */  </div><div class="line">        throw new UnsupportedOperationException(&quot;cannot be instantiated&quot;);  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    /** </div><div class="line">     * 判断SDCard是否可用 </div><div class="line">     *  </div><div class="line">     * @return </div><div class="line">     */  </div><div class="line">    public static boolean isSDCardEnable()  </div><div class="line">    &#123;  </div><div class="line">        return Environment.getExternalStorageState().equals(  </div><div class="line">                Environment.MEDIA_MOUNTED);  </div><div class="line">  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    /** </div><div class="line">     * 获取SD卡路径 </div><div class="line">     *  </div><div class="line">     * @return </div><div class="line">     */  </div><div class="line">    public static String getSDCardPath()  </div><div class="line">    &#123;  </div><div class="line">        return Environment.getExternalStorageDirectory().getAbsolutePath()  </div><div class="line">                + File.separator;  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    /** </div><div class="line">     * 获取SD卡的剩余容量 单位byte </div><div class="line">     *  </div><div class="line">     * @return </div><div class="line">     */  </div><div class="line">    public static long getSDCardAllSize()  </div><div class="line">    &#123;  </div><div class="line">        if (isSDCardEnable())  </div><div class="line">        &#123;  </div><div class="line">            StatFs stat = new StatFs(getSDCardPath());  </div><div class="line">            // 获取空闲的数据块的数量  </div><div class="line">            long availableBlocks = (long) stat.getAvailableBlocks() - 4;  </div><div class="line">            // 获取单个数据块的大小（byte）  </div><div class="line">            long freeBlocks = stat.getAvailableBlocks();  </div><div class="line">            return freeBlocks * availableBlocks;  </div><div class="line">        &#125;  </div><div class="line">        return 0;  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    /** </div><div class="line">     * 获取指定路径所在空间的剩余可用容量字节数，单位byte </div><div class="line">     *  </div><div class="line">     * @param filePath </div><div class="line">     * @return 容量字节 SDCard可用空间，内部存储可用空间 </div><div class="line">     */  </div><div class="line">    public static long getFreeBytes(String filePath)  </div><div class="line">    &#123;  </div><div class="line">        // 如果是sd卡的下的路径，则获取sd卡可用容量  </div><div class="line">        if (filePath.startsWith(getSDCardPath()))  </div><div class="line">        &#123;  </div><div class="line">            filePath = getSDCardPath();  </div><div class="line">        &#125; else  </div><div class="line">        &#123;// 如果是内部存储的路径，则获取内存存储的可用容量  </div><div class="line">            filePath = Environment.getDataDirectory().getAbsolutePath();  </div><div class="line">        &#125;  </div><div class="line">        StatFs stat = new StatFs(filePath);  </div><div class="line">        long availableBlocks = (long) stat.getAvailableBlocks() - 4;  </div><div class="line">        return stat.getBlockSize() * availableBlocks;  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    /** </div><div class="line">     * 获取系统存储路径 </div><div class="line">     *  </div><div class="line">     * @return </div><div class="line">     */  </div><div class="line">    public static String getRootDirectoryPath()  </div><div class="line">    &#123;  </div><div class="line">        return Environment.getRootDirectory().getAbsolutePath();  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="6、屏幕相关辅助类"><a href="#6、屏幕相关辅助类" class="headerlink" title="6、屏幕相关辅助类"></a>6、屏幕相关辅助类</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div></pre></td><td class="code"><pre><div class="line">import android.app.Activity;  </div><div class="line">import android.content.Context;  </div><div class="line">import android.graphics.Bitmap;  </div><div class="line">import android.graphics.Rect;  </div><div class="line">import android.util.DisplayMetrics;  </div><div class="line">import android.view.View;  </div><div class="line">import android.view.WindowManager;  </div><div class="line">  </div><div class="line">/** </div><div class="line"> * 获得屏幕相关的辅助类 </div><div class="line"> *  </div><div class="line"> *  </div><div class="line"> *  </div><div class="line"> */  </div><div class="line">public class ScreenUtils  </div><div class="line">&#123;  </div><div class="line">    private ScreenUtils()  </div><div class="line">    &#123;  </div><div class="line">        /* cannot be instantiated */  </div><div class="line">        throw new UnsupportedOperationException(&quot;cannot be instantiated&quot;);  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    /** </div><div class="line">     * 获得屏幕高度 </div><div class="line">     *  </div><div class="line">     * @param context </div><div class="line">     * @return </div><div class="line">     */  </div><div class="line">    public static int getScreenWidth(Context context)  </div><div class="line">    &#123;  </div><div class="line">        WindowManager wm = (WindowManager) context  </div><div class="line">                .getSystemService(Context.WINDOW_SERVICE);  </div><div class="line">        DisplayMetrics outMetrics = new DisplayMetrics();  </div><div class="line">        wm.getDefaultDisplay().getMetrics(outMetrics);  </div><div class="line">        return outMetrics.widthPixels;  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    /** </div><div class="line">     * 获得屏幕宽度 </div><div class="line">     *  </div><div class="line">     * @param context </div><div class="line">     * @return </div><div class="line">     */  </div><div class="line">    public static int getScreenHeight(Context context)  </div><div class="line">    &#123;  </div><div class="line">        WindowManager wm = (WindowManager) context  </div><div class="line">                .getSystemService(Context.WINDOW_SERVICE);  </div><div class="line">        DisplayMetrics outMetrics = new DisplayMetrics();  </div><div class="line">        wm.getDefaultDisplay().getMetrics(outMetrics);  </div><div class="line">        return outMetrics.heightPixels;  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    /** </div><div class="line">     * 获得状态栏的高度 </div><div class="line">     *  </div><div class="line">     * @param context </div><div class="line">     * @return </div><div class="line">     */  </div><div class="line">    public static int getStatusHeight(Context context)  </div><div class="line">    &#123;  </div><div class="line">  </div><div class="line">        int statusHeight = -1;  </div><div class="line">        try  </div><div class="line">        &#123;  </div><div class="line">            Class&lt;?&gt; clazz = Class.forName(&quot;com.android.internal.R$dimen&quot;);  </div><div class="line">            Object object = clazz.newInstance();  </div><div class="line">            int height = Integer.parseInt(clazz.getField(&quot;status_bar_height&quot;)  </div><div class="line">                    .get(object).toString());  </div><div class="line">            statusHeight = context.getResources().getDimensionPixelSize(height);  </div><div class="line">        &#125; catch (Exception e)  </div><div class="line">        &#123;  </div><div class="line">            e.printStackTrace();  </div><div class="line">        &#125;  </div><div class="line">        return statusHeight;  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    /** </div><div class="line">     * 获取当前屏幕截图，包含状态栏 </div><div class="line">     *  </div><div class="line">     * @param activity </div><div class="line">     * @return </div><div class="line">     */  </div><div class="line">    public static Bitmap snapShotWithStatusBar(Activity activity)  </div><div class="line">    &#123;  </div><div class="line">        View view = activity.getWindow().getDecorView();  </div><div class="line">        view.setDrawingCacheEnabled(true);  </div><div class="line">        view.buildDrawingCache();  </div><div class="line">        Bitmap bmp = view.getDrawingCache();  </div><div class="line">        int width = getScreenWidth(activity);  </div><div class="line">        int height = getScreenHeight(activity);  </div><div class="line">        Bitmap bp = null;  </div><div class="line">        bp = Bitmap.createBitmap(bmp, 0, 0, width, height);  </div><div class="line">        view.destroyDrawingCache();  </div><div class="line">        return bp;  </div><div class="line">  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    /** </div><div class="line">     * 获取当前屏幕截图，不包含状态栏 </div><div class="line">     *  </div><div class="line">     * @param activity </div><div class="line">     * @return </div><div class="line">     */  </div><div class="line">    public static Bitmap snapShotWithoutStatusBar(Activity activity)  </div><div class="line">    &#123;  </div><div class="line">        View view = activity.getWindow().getDecorView();  </div><div class="line">        view.setDrawingCacheEnabled(true);  </div><div class="line">        view.buildDrawingCache();  </div><div class="line">        Bitmap bmp = view.getDrawingCache();  </div><div class="line">        Rect frame = new Rect();  </div><div class="line">        activity.getWindow().getDecorView().getWindowVisibleDisplayFrame(frame);  </div><div class="line">        int statusBarHeight = frame.top;  </div><div class="line">  </div><div class="line">        int width = getScreenWidth(activity);  </div><div class="line">        int height = getScreenHeight(activity);  </div><div class="line">        Bitmap bp = null;  </div><div class="line">        bp = Bitmap.createBitmap(bmp, 0, statusBarHeight, width, height  </div><div class="line">                - statusBarHeight);  </div><div class="line">        view.destroyDrawingCache();  </div><div class="line">        return bp;  </div><div class="line">  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="7、App相关辅助类"><a href="#7、App相关辅助类" class="headerlink" title="7、App相关辅助类"></a>7、App相关辅助类</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div></pre></td><td class="code"><pre><div class="line">import android.content.Context;  </div><div class="line">import android.content.pm.PackageInfo;  </div><div class="line">import android.content.pm.PackageManager;  </div><div class="line">import android.content.pm.PackageManager.NameNotFoundException;  </div><div class="line">  </div><div class="line">/** </div><div class="line"> * 跟App相关的辅助类 </div><div class="line"> *  </div><div class="line"> *  </div><div class="line"> *  </div><div class="line"> */  </div><div class="line">public class AppUtils  </div><div class="line">&#123;  </div><div class="line">  </div><div class="line">    private AppUtils()  </div><div class="line">    &#123;  </div><div class="line">        /* cannot be instantiated */  </div><div class="line">        throw new UnsupportedOperationException(&quot;cannot be instantiated&quot;);  </div><div class="line">  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    /** </div><div class="line">     * 获取应用程序名称 </div><div class="line">     */  </div><div class="line">    public static String getAppName(Context context)  </div><div class="line">    &#123;  </div><div class="line">        try  </div><div class="line">        &#123;  </div><div class="line">            PackageManager packageManager = context.getPackageManager();  </div><div class="line">            PackageInfo packageInfo = packageManager.getPackageInfo(  </div><div class="line">                    context.getPackageName(), 0);  </div><div class="line">            int labelRes = packageInfo.applicationInfo.labelRes;  </div><div class="line">            return context.getResources().getString(labelRes);  </div><div class="line">        &#125; catch (NameNotFoundException e)  </div><div class="line">        &#123;  </div><div class="line">            e.printStackTrace();  </div><div class="line">        &#125;  </div><div class="line">        return null;  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    /** </div><div class="line">     * [获取应用程序版本名称信息] </div><div class="line">     *  </div><div class="line">     * @param context </div><div class="line">     * @return 当前应用的版本名称 </div><div class="line">     */  </div><div class="line">    public static String getVersionName(Context context)  </div><div class="line">    &#123;  </div><div class="line">        try  </div><div class="line">        &#123;  </div><div class="line">            PackageManager packageManager = context.getPackageManager();  </div><div class="line">            PackageInfo packageInfo = packageManager.getPackageInfo(  </div><div class="line">                    context.getPackageName(), 0);  </div><div class="line">            return packageInfo.versionName;  </div><div class="line">  </div><div class="line">        &#125; catch (NameNotFoundException e)  </div><div class="line">        &#123;  </div><div class="line">            e.printStackTrace();  </div><div class="line">        &#125;  </div><div class="line">        return null;  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="8、软键盘相关辅助类"><a href="#8、软键盘相关辅助类" class="headerlink" title="8、软键盘相关辅助类"></a>8、软键盘相关辅助类</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line">import android.content.Context;  </div><div class="line">import android.view.inputmethod.InputMethodManager;  </div><div class="line">import android.widget.EditText;  </div><div class="line">  </div><div class="line">/** </div><div class="line"> * 打开或关闭软键盘 </div><div class="line"> *  </div><div class="line"> * @author zhy </div><div class="line"> *  </div><div class="line"> */  </div><div class="line">public class KeyBoardUtils  </div><div class="line">&#123;  </div><div class="line">    /** </div><div class="line">     * 打卡软键盘 </div><div class="line">     *  </div><div class="line">     * @param mEditText </div><div class="line">     *            输入框 </div><div class="line">     * @param mContext </div><div class="line">     *            上下文 </div><div class="line">     */  </div><div class="line">    public static void openKeybord(EditText mEditText, Context mContext)  </div><div class="line">    &#123;  </div><div class="line">        InputMethodManager imm = (InputMethodManager) mContext  </div><div class="line">                .getSystemService(Context.INPUT_METHOD_SERVICE);  </div><div class="line">        imm.showSoftInput(mEditText, InputMethodManager.RESULT_SHOWN);  </div><div class="line">        imm.toggleSoftInput(InputMethodManager.SHOW_FORCED,  </div><div class="line">                InputMethodManager.HIDE_IMPLICIT_ONLY);  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    /** </div><div class="line">     * 关闭软键盘 </div><div class="line">     *  </div><div class="line">     * @param mEditText </div><div class="line">     *            输入框 </div><div class="line">     * @param mContext </div><div class="line">     *            上下文 </div><div class="line">     */  </div><div class="line">    public static void closeKeybord(EditText mEditText, Context mContext)  </div><div class="line">    &#123;  </div><div class="line">        InputMethodManager imm = (InputMethodManager) mContext  </div><div class="line">                .getSystemService(Context.INPUT_METHOD_SERVICE);  </div><div class="line">  </div><div class="line">        imm.hideSoftInputFromWindow(mEditText.getWindowToken(), 0);  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="9、网络相关辅助类"><a href="#9、网络相关辅助类" class="headerlink" title="9、网络相关辅助类"></a>9、网络相关辅助类</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div></pre></td><td class="code"><pre><div class="line">import android.app.Activity;  </div><div class="line">import android.content.ComponentName;  </div><div class="line">import android.content.Context;  </div><div class="line">import android.content.Intent;  </div><div class="line">import android.net.ConnectivityManager;  </div><div class="line">import android.net.NetworkInfo;  </div><div class="line">  </div><div class="line">/** </div><div class="line"> * 跟网络相关的工具类 </div><div class="line"> *  </div><div class="line"> *  </div><div class="line"> *  </div><div class="line"> */  </div><div class="line">public class NetUtils  </div><div class="line">&#123;  </div><div class="line">    private NetUtils()  </div><div class="line">    &#123;  </div><div class="line">        /* cannot be instantiated */  </div><div class="line">        throw new UnsupportedOperationException(&quot;cannot be instantiated&quot;);  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    /** </div><div class="line">     * 判断网络是否连接 </div><div class="line">     *  </div><div class="line">     * @param context </div><div class="line">     * @return </div><div class="line">     */  </div><div class="line">    public static boolean isConnected(Context context)  </div><div class="line">    &#123;  </div><div class="line">  </div><div class="line">        ConnectivityManager connectivity = (ConnectivityManager) context  </div><div class="line">                .getSystemService(Context.CONNECTIVITY_SERVICE);  </div><div class="line">  </div><div class="line">        if (null != connectivity)  </div><div class="line">        &#123;  </div><div class="line">  </div><div class="line">            NetworkInfo info = connectivity.getActiveNetworkInfo();  </div><div class="line">            if (null != info &amp;&amp; info.isConnected())  </div><div class="line">            &#123;  </div><div class="line">                if (info.getState() == NetworkInfo.State.CONNECTED)  </div><div class="line">                &#123;  </div><div class="line">                    return true;  </div><div class="line">                &#125;  </div><div class="line">            &#125;  </div><div class="line">        &#125;  </div><div class="line">        return false;  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    /** </div><div class="line">     * 判断是否是wifi连接 </div><div class="line">     */  </div><div class="line">    public static boolean isWifi(Context context)  </div><div class="line">    &#123;  </div><div class="line">        ConnectivityManager cm = (ConnectivityManager) context  </div><div class="line">                .getSystemService(Context.CONNECTIVITY_SERVICE);  </div><div class="line">  </div><div class="line">        if (cm == null)  </div><div class="line">            return false;  </div><div class="line">        return cm.getActiveNetworkInfo().getType() == ConnectivityManager.TYPE_WIFI;  </div><div class="line">  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    /** </div><div class="line">     * 打开网络设置界面 </div><div class="line">     */  </div><div class="line">    public static void openSetting(Activity activity)  </div><div class="line">    &#123;  </div><div class="line">        Intent intent = new Intent(&quot;/&quot;);  </div><div class="line">        ComponentName cm = new ComponentName(&quot;com.android.settings&quot;,  </div><div class="line">                &quot;com.android.settings.WirelessSettings&quot;);  </div><div class="line">        intent.setComponent(cm);  </div><div class="line">        intent.setAction(&quot;android.intent.action.VIEW&quot;);  </div><div class="line">        activity.startActivityForResult(intent, 0);  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="10、Http相关辅助类"><a href="#10、Http相关辅助类" class="headerlink" title="10、Http相关辅助类"></a>10、Http相关辅助类</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div></pre></td><td class="code"><pre><div class="line">import java.io.BufferedReader;  </div><div class="line">import java.io.ByteArrayOutputStream;  </div><div class="line">import java.io.IOException;  </div><div class="line">import java.io.InputStream;  </div><div class="line">import java.io.InputStreamReader;  </div><div class="line">import java.io.PrintWriter;  </div><div class="line">import java.net.HttpURLConnection;  </div><div class="line">import java.net.URL;  </div><div class="line">  </div><div class="line">/** </div><div class="line"> * Http请求的工具类 </div><div class="line"> *  </div><div class="line"> * @author zhy </div><div class="line"> *  </div><div class="line"> */  </div><div class="line">public class HttpUtils  </div><div class="line">&#123;  </div><div class="line">  </div><div class="line">    private static final int TIMEOUT_IN_MILLIONS = 5000;  </div><div class="line">  </div><div class="line">    public interface CallBack  </div><div class="line">    &#123;  </div><div class="line">        void onRequestComplete(String result);  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">  </div><div class="line">    /** </div><div class="line">     * 异步的Get请求 </div><div class="line">     *  </div><div class="line">     * @param urlStr </div><div class="line">     * @param callBack </div><div class="line">     */  </div><div class="line">    public static void doGetAsyn(final String urlStr, final CallBack callBack)  </div><div class="line">    &#123;  </div><div class="line">        new Thread()  </div><div class="line">        &#123;  </div><div class="line">            public void run()  </div><div class="line">            &#123;  </div><div class="line">                try  </div><div class="line">                &#123;  </div><div class="line">                    String result = doGet(urlStr);  </div><div class="line">                    if (callBack != null)  </div><div class="line">                    &#123;  </div><div class="line">                        callBack.onRequestComplete(result);  </div><div class="line">                    &#125;  </div><div class="line">                &#125; catch (Exception e)  </div><div class="line">                &#123;  </div><div class="line">                    e.printStackTrace();  </div><div class="line">                &#125;  </div><div class="line">  </div><div class="line">            &#125;;  </div><div class="line">        &#125;.start();  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    /** </div><div class="line">     * 异步的Post请求 </div><div class="line">     * @param urlStr </div><div class="line">     * @param params </div><div class="line">     * @param callBack </div><div class="line">     * @throws Exception </div><div class="line">     */  </div><div class="line">    public static void doPostAsyn(final String urlStr, final String params,  </div><div class="line">            final CallBack callBack) throws Exception  </div><div class="line">    &#123;  </div><div class="line">        new Thread()  </div><div class="line">        &#123;  </div><div class="line">            public void run()  </div><div class="line">            &#123;  </div><div class="line">                try  </div><div class="line">                &#123;  </div><div class="line">                    String result = doPost(urlStr, params);  </div><div class="line">                    if (callBack != null)  </div><div class="line">                    &#123;  </div><div class="line">                        callBack.onRequestComplete(result);  </div><div class="line">                    &#125;  </div><div class="line">                &#125; catch (Exception e)  </div><div class="line">                &#123;  </div><div class="line">                    e.printStackTrace();  </div><div class="line">                &#125;  </div><div class="line">  </div><div class="line">            &#125;;  </div><div class="line">        &#125;.start();  </div><div class="line">  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    /** </div><div class="line">     * Get请求，获得返回数据 </div><div class="line">     *  </div><div class="line">     * @param urlStr </div><div class="line">     * @return </div><div class="line">     * @throws Exception </div><div class="line">     */  </div><div class="line">    public static String doGet(String urlStr)   </div><div class="line">    &#123;  </div><div class="line">        URL url = null;  </div><div class="line">        HttpURLConnection conn = null;  </div><div class="line">        InputStream is = null;  </div><div class="line">        ByteArrayOutputStream baos = null;  </div><div class="line">        try  </div><div class="line">        &#123;  </div><div class="line">            url = new URL(urlStr);  </div><div class="line">            conn = (HttpURLConnection) url.openConnection();  </div><div class="line">            conn.setReadTimeout(TIMEOUT_IN_MILLIONS);  </div><div class="line">            conn.setConnectTimeout(TIMEOUT_IN_MILLIONS);  </div><div class="line">            conn.setRequestMethod(&quot;GET&quot;);  </div><div class="line">            conn.setRequestProperty(&quot;accept&quot;, &quot;*/*&quot;);  </div><div class="line">            conn.setRequestProperty(&quot;connection&quot;, &quot;Keep-Alive&quot;);  </div><div class="line">            if (conn.getResponseCode() == 200)  </div><div class="line">            &#123;  </div><div class="line">                is = conn.getInputStream();  </div><div class="line">                baos = new ByteArrayOutputStream();  </div><div class="line">                int len = -1;  </div><div class="line">                byte[] buf = new byte[128];  </div><div class="line">  </div><div class="line">                while ((len = is.read(buf)) != -1)  </div><div class="line">                &#123;  </div><div class="line">                    baos.write(buf, 0, len);  </div><div class="line">                &#125;  </div><div class="line">                baos.flush();  </div><div class="line">                return baos.toString();  </div><div class="line">            &#125; else  </div><div class="line">            &#123;  </div><div class="line">                throw new RuntimeException(&quot; responseCode is not 200 ... &quot;);  </div><div class="line">            &#125;  </div><div class="line">  </div><div class="line">        &#125; catch (Exception e)  </div><div class="line">        &#123;  </div><div class="line">            e.printStackTrace();  </div><div class="line">        &#125; finally  </div><div class="line">        &#123;  </div><div class="line">            try  </div><div class="line">            &#123;  </div><div class="line">                if (is != null)  </div><div class="line">                    is.close();  </div><div class="line">            &#125; catch (IOException e)  </div><div class="line">            &#123;  </div><div class="line">            &#125;  </div><div class="line">            try  </div><div class="line">            &#123;  </div><div class="line">                if (baos != null)  </div><div class="line">                    baos.close();  </div><div class="line">            &#125; catch (IOException e)  </div><div class="line">            &#123;  </div><div class="line">            &#125;  </div><div class="line">            conn.disconnect();  </div><div class="line">        &#125;  </div><div class="line">          </div><div class="line">        return null ;  </div><div class="line">  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    /**  </div><div class="line">     * 向指定 URL 发送POST方法的请求  </div><div class="line">     *   </div><div class="line">     * @param url  </div><div class="line">     *            发送请求的 URL  </div><div class="line">     * @param param  </div><div class="line">     *            请求参数，请求参数应该是 name1=value1&amp;name2=value2 的形式。  </div><div class="line">     * @return 所代表远程资源的响应结果  </div><div class="line">     * @throws Exception  </div><div class="line">     */  </div><div class="line">    public static String doPost(String url, String param)   </div><div class="line">    &#123;  </div><div class="line">        PrintWriter out = null;  </div><div class="line">        BufferedReader in = null;  </div><div class="line">        String result = &quot;&quot;;  </div><div class="line">        try  </div><div class="line">        &#123;  </div><div class="line">            URL realUrl = new URL(url);  </div><div class="line">            // 打开和URL之间的连接  </div><div class="line">            HttpURLConnection conn = (HttpURLConnection) realUrl  </div><div class="line">                    .openConnection();  </div><div class="line">            // 设置通用的请求属性  </div><div class="line">            conn.setRequestProperty(&quot;accept&quot;, &quot;*/*&quot;);  </div><div class="line">            conn.setRequestProperty(&quot;connection&quot;, &quot;Keep-Alive&quot;);  </div><div class="line">            conn.setRequestMethod(&quot;POST&quot;);  </div><div class="line">            conn.setRequestProperty(&quot;Content-Type&quot;,  </div><div class="line">                    &quot;application/x-www-form-urlencoded&quot;);  </div><div class="line">            conn.setRequestProperty(&quot;charset&quot;, &quot;utf-8&quot;);  </div><div class="line">            conn.setUseCaches(false);  </div><div class="line">            // 发送POST请求必须设置如下两行  </div><div class="line">            conn.setDoOutput(true);  </div><div class="line">            conn.setDoInput(true);  </div><div class="line">            conn.setReadTimeout(TIMEOUT_IN_MILLIONS);  </div><div class="line">            conn.setConnectTimeout(TIMEOUT_IN_MILLIONS);  </div><div class="line">  </div><div class="line">            if (param != null &amp;&amp; !param.trim().equals(&quot;&quot;))  </div><div class="line">            &#123;  </div><div class="line">                // 获取URLConnection对象对应的输出流  </div><div class="line">                out = new PrintWriter(conn.getOutputStream());  </div><div class="line">                // 发送请求参数  </div><div class="line">                out.print(param);  </div><div class="line">                // flush输出流的缓冲  </div><div class="line">                out.flush();  </div><div class="line">            &#125;  </div><div class="line">            // 定义BufferedReader输入流来读取URL的响应  </div><div class="line">            in = new BufferedReader(  </div><div class="line">                    new InputStreamReader(conn.getInputStream()));  </div><div class="line">            String line;  </div><div class="line">            while ((line = in.readLine()) != null)  </div><div class="line">            &#123;  </div><div class="line">                result += line;  </div><div class="line">            &#125;  </div><div class="line">        &#125; catch (Exception e)  </div><div class="line">        &#123;  </div><div class="line">            e.printStackTrace();  </div><div class="line">        &#125;  </div><div class="line">        // 使用finally块来关闭输出流、输入流  </div><div class="line">        finally  </div><div class="line">        &#123;  </div><div class="line">            try  </div><div class="line">            &#123;  </div><div class="line">                if (out != null)  </div><div class="line">                &#123;  </div><div class="line">                    out.close();  </div><div class="line">                &#125;  </div><div class="line">                if (in != null)  </div><div class="line">                &#123;  </div><div class="line">                    in.close();  </div><div class="line">                &#125;  </div><div class="line">            &#125; catch (IOException ex)  </div><div class="line">            &#123;  </div><div class="line">                ex.printStackTrace();  </div><div class="line">            &#125;  </div><div class="line">        &#125;  </div><div class="line">        return result;  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="11、对话框工具类"><a href="#11、对话框工具类" class="headerlink" title="11、对话框工具类"></a>11、对话框工具类</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> *</div><div class="line"> * 使用观察者模式来实现确定结果回调</div><div class="line"> *</div><div class="line"> * 调用方式：</div><div class="line"> * AlertDialogUtil dialogUtil = new AlertDialogUtil(context);</div><div class="line"> * dialogUtil.showDialog(&quot;确定删除已上传的图片？&quot;);</div><div class="line"> * dialogUtil.setDialogPositiveButtonListener(new AlertDialogUtil.DialogPositiveButtonListener() &#123;</div><div class="line"> *</div><div class="line"> *      @Override</div><div class="line"> *     public void setDialogPositiveButtonListener() &#123;</div><div class="line"> *</div><div class="line"> *    &#125;</div><div class="line"> * &#125;);</div><div class="line"></div><div class="line"> */</div><div class="line">public class AlertDialogUtil &#123;</div><div class="line">    public Context context;</div><div class="line">    private DialogPositiveButtonListener listener;</div><div class="line"></div><div class="line">    public AlertDialogUtil(Context context) &#123;</div><div class="line">        this.context = context;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void showDialog(String message) &#123;</div><div class="line">        AlertDialog.Builder dialog = new AlertDialog.Builder(context);</div><div class="line">        dialog.setMessage(message);</div><div class="line">        dialog.setCancelable(false);//点击框外取消</div><div class="line">        dialog.setPositiveButton(&quot;确定&quot;, new DialogInterface.OnClickListener() &#123;</div><div class="line">            @Override</div><div class="line">            public void onClick(DialogInterface dialogInterface, int i) &#123;</div><div class="line">                if (listener != null) &#123;</div><div class="line">                    listener.setDialogPositiveButtonListener();</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">        &#125;);</div><div class="line">        dialog.setNegativeButton(&quot;取消&quot;, null);</div><div class="line">        dialog.show();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void setDialogPositiveButtonListener(DialogPositiveButtonListener listener) &#123;</div><div class="line">        this.listener = listener;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public interface DialogPositiveButtonListener &#123;</div><div class="line">        void setDialogPositiveButtonListener();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="12、文件相关"><a href="#12、文件相关" class="headerlink" title="12、文件相关"></a>12、文件相关</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div></pre></td><td class="code"><pre><div class="line">public class FileUtils &#123;</div><div class="line"></div><div class="line">    public static String SDPATH = Environment.getExternalStorageDirectory() + &quot;/formats/&quot;;// 获取文件夹</div><div class="line">    // 保存图片</div><div class="line"></div><div class="line">    public static boolean saveBitmap(Bitmap mBitmap, String path, String imgName) &#123;</div><div class="line">        String sdStatus = Environment.getExternalStorageState();</div><div class="line">        if (!sdStatus.equals(Environment.MEDIA_MOUNTED)) &#123; // 检测sd是否可用</div><div class="line">            return false;</div><div class="line">        &#125;</div><div class="line">        FileOutputStream b = null;</div><div class="line">        File file = new File(path);</div><div class="line">        file.mkdirs();// 创建文件夹</div><div class="line">        String fileName = path + imgName;</div><div class="line">//        delFile(path, imgName);//删除本地旧图</div><div class="line">        try &#123;</div><div class="line">            b = new FileOutputStream(fileName);</div><div class="line">            mBitmap.compress(Bitmap.CompressFormat.JPEG, 100, b);// 把数据写入文件</div><div class="line">        &#125; catch (FileNotFoundException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125; finally &#123;</div><div class="line">            try &#123;</div><div class="line">                    b.flush();</div><div class="line">                    b.close();</div><div class="line"></div><div class="line">            &#125; catch (IOException e) &#123;</div><div class="line">                e.printStackTrace();</div><div class="line">            &#125;</div><div class="line"></div><div class="line">        &#125;</div><div class="line">        return true;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public static File createSDDir(String dirName) throws IOException &#123;</div><div class="line">        File dir = new File(SDPATH + dirName);</div><div class="line">        if (Environment.getExternalStorageState().equals(Environment.MEDIA_MOUNTED)) &#123;</div><div class="line"></div><div class="line">            System.out.println(&quot;createSDDir:&quot; + dir.getAbsolutePath());</div><div class="line">            System.out.println(&quot;createSDDir:&quot; + dir.mkdir());</div><div class="line">        &#125;</div><div class="line">        return dir;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public static boolean isFileExist(String fileName) &#123;</div><div class="line">        File file = new File(SDPATH + fileName);</div><div class="line">        file.isFile();</div><div class="line">        return file.exists();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    // 删除文件</div><div class="line">    public static void delFile(String path, String fileName) &#123;</div><div class="line">        File file = new File(path + fileName);</div><div class="line">        if (file.isFile()) &#123;</div><div class="line">            file.delete();</div><div class="line">        &#125;</div><div class="line">        file.exists();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    // 删除文件夹和文件夹里面的文件</div><div class="line">    public static void deleteDir() &#123;</div><div class="line">        File dir = new File(SDPATH);</div><div class="line">        if (dir == null || !dir.exists() || !dir.isDirectory())</div><div class="line">            return;</div><div class="line"></div><div class="line">        for (File file : dir.listFiles()) &#123;</div><div class="line">            if (file.isFile())</div><div class="line">                file.delete(); // 删除所有文件</div><div class="line">            else if (file.isDirectory())</div><div class="line">                deleteDir(); // 递规的方式删除文件夹</div><div class="line">        &#125;</div><div class="line">        dir.delete();// 删除目录本身</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public static boolean fileIsExists(String path) &#123;</div><div class="line">        try &#123;</div><div class="line">            File f = new File(path);</div><div class="line">            if (!f.exists()) &#123;</div><div class="line">                return false;</div><div class="line">            &#125;</div><div class="line">        &#125; catch (Exception e) &#123;</div><div class="line"></div><div class="line">            return false;</div><div class="line">        &#125;</div><div class="line">        return true;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="13、时间戳相关"><a href="#13、时间戳相关" class="headerlink" title="13、时间戳相关"></a>13、时间戳相关</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div></pre></td><td class="code"><pre><div class="line">public class DateUtils &#123;</div><div class="line"></div><div class="line">    private static SimpleDateFormat sf;</div><div class="line">    private static SimpleDateFormat sdf;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 获取系统时间 格式为：&quot;yyyy/MM/dd &quot;</div><div class="line">     **/</div><div class="line">    public static String getCurrentDate() &#123;</div><div class="line">        Date d = new Date();</div><div class="line">        sf = new SimpleDateFormat(&quot;yyyy年MM月dd日&quot;);</div><div class="line">        return sf.format(d);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 获取系统时间 格式为：&quot;yyyy &quot;</div><div class="line">     **/</div><div class="line">    public static String getCurrentYear() &#123;</div><div class="line">        Date d = new Date();</div><div class="line">        sf = new SimpleDateFormat(&quot;yyyy&quot;);</div><div class="line">        return sf.format(d);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 获取系统时间 格式为：&quot;MM&quot;</div><div class="line">     **/</div><div class="line">    public static String getCurrentMonth() &#123;</div><div class="line">        Date d = new Date();</div><div class="line">        sf = new SimpleDateFormat(&quot;MM&quot;);</div><div class="line">        return sf.format(d);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 获取系统时间 格式为：&quot;dd&quot;</div><div class="line">     **/</div><div class="line">    public static String getCurrentDay() &#123;</div><div class="line">        Date d = new Date();</div><div class="line">        sf = new SimpleDateFormat(&quot;dd&quot;);</div><div class="line">        return sf.format(d);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 获取当前时间戳</div><div class="line">     *</div><div class="line">     * @return</div><div class="line">     */</div><div class="line">    public static long getCurrentTime() &#123;</div><div class="line">        long d = new Date().getTime() / 1000;</div><div class="line">        return d;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 时间戳转换成字符窜</div><div class="line">     */</div><div class="line">    public static String getDateToString(long time) &#123;</div><div class="line">        Date d = new Date(time * 1000);</div><div class="line">        sf = new SimpleDateFormat(&quot;yyyy年MM月dd日&quot;);</div><div class="line">        return sf.format(d);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 时间戳中获取年</div><div class="line">     */</div><div class="line">    public static String getYearFromTime(long time) &#123;</div><div class="line">        Date d = new Date(time * 1000);</div><div class="line">        sf = new SimpleDateFormat(&quot;yyyy&quot;);</div><div class="line">        return sf.format(d);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 时间戳中获取月</div><div class="line">     */</div><div class="line">    public static String getMonthFromTime(long time) &#123;</div><div class="line">        Date d = new Date(time * 1000);</div><div class="line">        sf = new SimpleDateFormat(&quot;MM&quot;);</div><div class="line">        return sf.format(d);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 时间戳中获取日</div><div class="line">     */</div><div class="line">    public static String getDayFromTime(long time) &#123;</div><div class="line">        Date d = new Date(time * 1000);</div><div class="line">        sf = new SimpleDateFormat(&quot;dd&quot;);</div><div class="line">        return sf.format(d);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 将字符串转为时间戳</div><div class="line">     */</div><div class="line">    public static long getStringToDate(String time) &#123;</div><div class="line">        sdf = new SimpleDateFormat(&quot;yyyy年MM月dd日&quot;);</div><div class="line">        Date date = new Date();</div><div class="line">        try &#123;</div><div class="line">            date = sdf.parse(time);</div><div class="line">        &#125; catch (ParseException e) &#123;</div><div class="line">            // TODO Auto-generated catch block</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">        return date.getTime();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="14、比较常用的正则表达式验证"><a href="#14、比较常用的正则表达式验证" class="headerlink" title="14、比较常用的正则表达式验证"></a>14、比较常用的正则表达式验证</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div></pre></td><td class="code"><pre><div class="line">public class RegularUtils &#123;</div><div class="line"></div><div class="line">    private RegularUtils() &#123;</div><div class="line">        throw new UnsupportedOperationException(&quot;u can&apos;t fuck me...&quot;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 验证手机号（简单）</div><div class="line">     */</div><div class="line">    private static final String REGEX_MOBILE_SIMPLE = &quot;^[1]\\d&#123;10&#125;$&quot;;</div><div class="line">    /**</div><div class="line">     * 验证手机号（精确）</div><div class="line">     * &lt;p&gt;</div><div class="line">     * &lt;p&gt;移动：134(0-8)、135、136、137、138、139、147、150、151、152、157、158、159、178、182、183、184、187、188</div><div class="line">     * &lt;p&gt;联通：130、131、132、145、155、156、175、176、185、186</div><div class="line">     * &lt;p&gt;电信：133、153、173、177、180、181、189</div><div class="line">     * &lt;p&gt;全球星：1349</div><div class="line">     * &lt;p&gt;虚拟运营商：170</div><div class="line">     */</div><div class="line">    private static final String REGEX_MOBILE_EXACT = &quot;^((13[0-9])|(14[5,7])|(15[0-3,5-8])|(17[0,3,5-8])|(18[0-9])|(147))\\d&#123;8&#125;$&quot;;</div><div class="line">    /**</div><div class="line">     * 验证座机号,正确格式：xxx/xxxx-xxxxxxx/xxxxxxxx/</div><div class="line">     */</div><div class="line">    private static final String REGEX_TEL = &quot;^0\\d&#123;2,3&#125;[- ]?\\d&#123;7,8&#125;&quot;;</div><div class="line">    /**</div><div class="line">     * 验证邮箱</div><div class="line">     */</div><div class="line">    private static final String REGEX_EMAIL = &quot;^\\w+([-+.]\\w+)*@\\w+([-.]\\w+)*\\.\\w+([-.]\\w+)*$&quot;;</div><div class="line">    /**</div><div class="line">     * 验证url</div><div class="line">     */</div><div class="line">    private static final String REGEX_URL = &quot;http(s)?://([\\w-]+\\.)+[\\w-]+(/[\\w-./?%&amp;=]*)?&quot;;</div><div class="line">    /**</div><div class="line">     * 验证汉字</div><div class="line">     */</div><div class="line">    private static final String REGEX_CHZ = &quot;^[\\u4e00-\\u9fa5]+$&quot;;</div><div class="line">    /**</div><div class="line">     * 验证用户名,取值范围为a-z,A-Z,0-9,&quot;_&quot;,汉字，不能以&quot;_&quot;结尾,用户名必须是6-20位</div><div class="line">     */</div><div class="line">    private static final String REGEX_USERNAME = &quot;^[\\w\\u4e00-\\u9fa5]&#123;6,20&#125;(?&lt;!_)$&quot;;</div><div class="line">    /**</div><div class="line">     * 验证IP地址</div><div class="line">     */</div><div class="line">    private static final String REGEX_IP = &quot;((2[0-4]\\d|25[0-5]|[01]?\\d\\d?)\\.)&#123;3&#125;(2[0-4]\\d|25[0-5]|[01]?\\d\\d?)&quot;;</div><div class="line"></div><div class="line">    //If u want more please visit http://toutiao.com/i6231678548520731137/</div><div class="line"></div><div class="line">    /**</div><div class="line">     * @param string 待验证文本</div><div class="line">     * @return 是否符合手机号（简单）格式</div><div class="line">     */</div><div class="line">    public static boolean isMobileSimple(String string) &#123;</div><div class="line">        return isMatch(REGEX_MOBILE_SIMPLE, string);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * @param string 待验证文本</div><div class="line">     * @return 是否符合手机号（精确）格式</div><div class="line">     */</div><div class="line">    public static boolean isMobileExact(String string) &#123;</div><div class="line">        return isMatch(REGEX_MOBILE_EXACT, string);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * @param string 待验证文本</div><div class="line">     * @return 是否符合座机号码格式</div><div class="line">     */</div><div class="line">    public static boolean isTel(String string) &#123;</div><div class="line">        return isMatch(REGEX_TEL, string);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * @param string 待验证文本</div><div class="line">     * @return 是否符合邮箱格式</div><div class="line">     */</div><div class="line">    public static boolean isEmail(String string) &#123;</div><div class="line">        return isMatch(REGEX_EMAIL, string);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * @param string 待验证文本</div><div class="line">     * @return 是否符合网址格式</div><div class="line">     */</div><div class="line">    public static boolean isURL(String string) &#123;</div><div class="line">        return isMatch(REGEX_URL, string);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * @param string 待验证文本</div><div class="line">     * @return 是否符合汉字</div><div class="line">     */</div><div class="line">    public static boolean isChz(String string) &#123;</div><div class="line">        return isMatch(REGEX_CHZ, string);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * @param string 待验证文本</div><div class="line">     * @return 是否符合用户名</div><div class="line">     */</div><div class="line">    public static boolean isUsername(String string) &#123;</div><div class="line">        return isMatch(REGEX_USERNAME, string);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * @param regex  正则表达式字符串</div><div class="line">     * @param string 要匹配的字符串</div><div class="line">     * @return 如果str 符合 regex的正则表达式格式,返回true, 否则返回 false;</div><div class="line">     */</div><div class="line">    public static boolean isMatch(String regex, String string) &#123;</div><div class="line">        return !TextUtils.isEmpty(string) &amp;&amp; Pattern.matches(regex, string);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;1、日志工具类&quot;&gt;&lt;a href=&quot;#1、日志工具类&quot; class=&quot;headerlink&quot; title=&quot;1、日志工具类&quot;&gt;&lt;/a&gt;1、日志工具类&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;24&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;25&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;26&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;27&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;28&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;29&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;30&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;31&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;32&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;33&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;34&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;35&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;36&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;37&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;38&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;39&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;40&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;41&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;42&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;43&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;44&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;45&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;46&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;47&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;48&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;49&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;50&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;51&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;52&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;53&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;54&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;55&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;56&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;57&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;58&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;59&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;60&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;61&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;62&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;63&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;64&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;65&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;66&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;67&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;68&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;import android.util.Log;  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;/** &lt;/div&gt;&lt;div class=&quot;line&quot;&gt; * Log统一管理类 &lt;/div&gt;&lt;div class=&quot;line&quot;&gt; *  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt; */  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;public class LogUtils  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#123;  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    private LogUtils()  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#123;  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        /* cannot be instantiated */  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        throw new UnsupportedOperationException(&amp;quot;cannot be instantiated&amp;quot;);  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    public static boolean isDebug = true;// 是否需要打印bug，可以在application的onCreate函数里面初始化  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    private static final String TAG = &amp;quot;LogUtil&amp;quot;;  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    // 下面四个是默认tag的函数  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    public static void i(String msg)  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#123;  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        if (isDebug)  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            Log.i(TAG, msg);  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    public static void d(String msg)  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#123;  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        if (isDebug)  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            Log.d(TAG, msg);  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    public static void e(String msg)  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#123;  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        if (isDebug)  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            Log.e(TAG, msg);  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    public static void v(String msg)  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#123;  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        if (isDebug)  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            Log.v(TAG, msg);  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    // 下面是传入自定义tag的函数  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    public static void i(String tag, String msg)  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#123;  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        if (isDebug)  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            Log.i(tag, msg);  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    public static void d(String tag, String msg)  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#123;  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        if (isDebug)  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            Log.i(tag, msg);  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    public static void e(String tag, String msg)  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#123;  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        if (isDebug)  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            Log.i(tag, msg);  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    public static void v(String tag, String msg)  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#123;  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        if (isDebug)  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            Log.i(tag, msg);  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;2、Toast管理类&quot;&gt;&lt;a href=&quot;#2、Toast管理类&quot; class=&quot;headerlink&quot; title=&quot;2、Toast管理类&quot;&gt;&lt;/a&gt;2、Toast管理类&lt;/h3&gt;
    
    </summary>
    
      <category term="android工具" scheme="https://ericchenwj.github.io/androidBlog/categories/android%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="android工具" scheme="https://ericchenwj.github.io/androidBlog/tags/android%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>Android界面性能调优手册</title>
    <link href="https://ericchenwj.github.io/androidBlog/2017/12/19/Android%E7%95%8C%E9%9D%A2%E6%80%A7%E8%83%BD%E8%B0%83%E4%BC%98%E6%89%8B%E5%86%8C/"/>
    <id>https://ericchenwj.github.io/androidBlog/2017/12/19/Android界面性能调优手册/</id>
    <published>2017-12-19T03:31:00.000Z</published>
    <updated>2017-12-19T03:32:52.389Z</updated>
    
    <content type="html"><![CDATA[<p>这里转载一篇好文分享给各位看看~~</p><p><a href="https://yq.aliyun.com/articles/152066?spm=5176.8067842.tagmain.57.1K9u3l" target="_blank" rel="external">Android界面性能调优手册</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;这里转载一篇好文分享给各位看看~~&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://yq.aliyun.com/articles/152066?spm=5176.8067842.tagmain.57.1K9u3l&quot; target=&quot;_blank&quot; rel=&quot;external
      
    
    </summary>
    
      <category term="android优化" scheme="https://ericchenwj.github.io/androidBlog/categories/android%E4%BC%98%E5%8C%96/"/>
    
    
      <category term="android优化" scheme="https://ericchenwj.github.io/androidBlog/tags/android%E4%BC%98%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>WebViewStudy</title>
    <link href="https://ericchenwj.github.io/androidBlog/2017/12/18/WebViewStudy/"/>
    <id>https://ericchenwj.github.io/androidBlog/2017/12/18/WebViewStudy/</id>
    <published>2017-12-18T03:45:00.000Z</published>
    <updated>2017-12-18T03:49:27.206Z</updated>
    
    <content type="html"><![CDATA[<p>WebView 全方面的使用，JS交互、进度条、发短信、打电话、发邮件、上传图片、字体设置、视频全屏播放等<br><a href="https://github.com/youlookwhat/WebViewStudy" target="_blank" rel="external">WebView使用Demo</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;WebView 全方面的使用，JS交互、进度条、发短信、打电话、发邮件、上传图片、字体设置、视频全屏播放等&lt;br&gt;&lt;a href=&quot;https://github.com/youlookwhat/WebViewStudy&quot; target=&quot;_blank&quot; rel=&quot;exter
      
    
    </summary>
    
      <category term="android常用知识" scheme="https://ericchenwj.github.io/androidBlog/categories/android%E5%B8%B8%E7%94%A8%E7%9F%A5%E8%AF%86/"/>
    
    
      <category term="android常用知识" scheme="https://ericchenwj.github.io/androidBlog/tags/android%E5%B8%B8%E7%94%A8%E7%9F%A5%E8%AF%86/"/>
    
  </entry>
  
  <entry>
    <title>android解决输入法键盘遮盖布局问题</title>
    <link href="https://ericchenwj.github.io/androidBlog/2017/12/15/android%E8%A7%A3%E5%86%B3%E8%BE%93%E5%85%A5%E6%B3%95%E9%94%AE%E7%9B%98%E9%81%AE%E7%9B%96%E5%B8%83%E5%B1%80%E9%97%AE%E9%A2%98/"/>
    <id>https://ericchenwj.github.io/androidBlog/2017/12/15/android解决输入法键盘遮盖布局问题/</id>
    <published>2017-12-15T07:12:55.000Z</published>
    <updated>2017-12-15T07:16:15.306Z</updated>
    
    <content type="html"><![CDATA[<p>代码如下所示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line">     * addLayoutListener方法如下</div><div class="line">     * @param main 根布局</div><div class="line">     * @param scroll 需要显示的最下方View</div><div class="line">     */</div><div class="line">public void addLayoutListener(final View main, final View scroll) &#123;</div><div class="line">        main.getViewTreeObserver().addOnGlobalLayoutListener(new ViewTreeObserver.OnGlobalLayoutListener() &#123;</div><div class="line">            @Override</div><div class="line">            public void onGlobalLayout() &#123;</div><div class="line">                Rect rect = new Rect();</div><div class="line">                //1、获取main在窗体的可视区域</div><div class="line">                main.getWindowVisibleDisplayFrame(rect);</div><div class="line">                //2、获取main在窗体的不可视区域高度，在键盘没有弹起时，main.getRootView().getHeight()调节度应该和rect.bottom高度一样</div><div class="line">                int mainInvisibleHeight = main.getRootView().getHeight() - rect.bottom;</div><div class="line">                int screenHeight = main.getRootView().getHeight();//屏幕高度</div><div class="line">                RelativeLayout scrollView = (RelativeLayout) main.findViewById(R.id.input_panel);</div><div class="line">                //3、不可见区域大于屏幕本身高度的1/4：说明键盘弹起了</div><div class="line">                if (mainInvisibleHeight &gt; screenHeight / 4) &#123;</div><div class="line">                    int[] location = new int[2];</div><div class="line">                    scroll.getLocationInWindow(location);</div><div class="line">                    // 4、获取Scroll的窗体坐标，算出main需要滚动的高度</div><div class="line">                    int srollHeight = (location[1] + scroll.getHeight()) - rect.bottom;</div><div class="line">                    //5、让界面整体上移键盘的高度</div><div class="line">                    if (viewScrollReset) &#123;</div><div class="line">                        scrollView.scrollTo(0, srollHeight + 10);</div><div class="line">                        viewScrollReset = false;</div><div class="line">                    &#125;</div><div class="line">                &#125; else &#123;</div><div class="line">                    //3、不可见区域小于屏幕高度1/4时,说明键盘隐藏了，把界面下移，移回到原有高度</div><div class="line">                    scrollView.scrollTo(0, 0);</div><div class="line">                    viewScrollReset = true;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;代码如下所示：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div cla
      
    
    </summary>
    
      <category term="android常见问题" scheme="https://ericchenwj.github.io/androidBlog/categories/android%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/"/>
    
    
      <category term="android常见问题" scheme="https://ericchenwj.github.io/androidBlog/tags/android%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>Markdown的常用语法</title>
    <link href="https://ericchenwj.github.io/androidBlog/2017/12/15/Markdown%E7%9A%84%E5%B8%B8%E7%94%A8%E8%AF%AD%E6%B3%95/"/>
    <id>https://ericchenwj.github.io/androidBlog/2017/12/15/Markdown的常用语法/</id>
    <published>2017-12-15T06:17:11.000Z</published>
    <updated>2017-12-15T06:53:44.409Z</updated>
    
    <content type="html"><![CDATA[<p>注意：Markdown使用#、+、*等符号来标记， 符号后面必须跟上至少1个空格才有效！</p><h4 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h4><p>在Markdown当中设置标题，有两种方式：<br>第一种：通过在文字下方添加“=”和“-”，他们分别表示一级标题和二级标题。<br>第二种：在文字开头加上 “#”，通过“#”数量表示几级标题。（一共只有1~6级标题，1级标题字体最大）</p><h4 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h4><p>支持有序列表和无序列表</p><p>无序列表使用-、+和*作为列表标记</p><p>有序列表则使用数字加英文句点.来表示<br><a id="more"></a></p><h4 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h4><p>引用以&gt;来表示，引用中支持多级引用、标题、列表、代码块、分割线等常规语法。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">&gt; 这是一段引用    //在`&gt;`后面有 1 个空格</div><div class="line">&gt; </div><div class="line">&gt;     这是引用的代码块形式    //在`&gt;`后面有 5 个空格</div><div class="line">&gt;     </div><div class="line">&gt; 代码例子：</div><div class="line">&gt;   </div><div class="line">    protected void onCreate(Bundle savedInstanceState) &#123;</div><div class="line">        super.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_main);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&gt; 一级引用</div><div class="line">&gt; &gt; 二级引用</div><div class="line">&gt; &gt; &gt; 三级引用</div><div class="line"></div><div class="line">&gt; #### 这是一个四级标题</div><div class="line">&gt; </div><div class="line">&gt; 1. 这是第一行列表项</div><div class="line">&gt; 2. 这是第二行列表项</div></pre></td></tr></table></figure><h4 id="强调"><a href="#强调" class="headerlink" title="强调"></a>强调</h4><blockquote><p>两个<em>或-代表加粗，一个</em>或-代表斜体，<del>代表删除</del> </p></blockquote><h4 id="图片与链接"><a href="#图片与链接" class="headerlink" title="图片与链接"></a>图片与链接</h4><p>图片与链接的语法很像，区别在一个 ! 号。二者格式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">图片：![]()    ![图片文本(可忽略)](图片地址)</div><div class="line">链接：[]()     [链接文本](链接地址)</div></pre></td></tr></table></figure><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><p>代码分为行内代码和代码块。</p><p>行内代码使用 <code>代码</code> 标识，可嵌入文字中</p><p>代码块使用4个空格或```标识</p><p>代码语法高亮在 ```后面加上空格和语言名称即可</p><h4 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h4><p>表格对齐格式：</p><p>居左：:—-<br>居中：:—-:或—–<br>居右：—-:</p><p>例子：</p><table><thead><tr><th style="text-align:left">标题</th><th style="text-align:center">标题</th><th style="text-align:right">标题</th></tr></thead><tbody><tr><td style="text-align:left">居左测试文本</td><td style="text-align:center">居中测试文本</td><td style="text-align:right">居右测试文本</td></tr><tr><td style="text-align:left">居左测试文本1</td><td style="text-align:center">居中测试文本2</td><td style="text-align:right">居右测试文本3</td></tr><tr><td style="text-align:left">居左测试文本11</td><td style="text-align:center">居中测试文本22</td><td style="text-align:right">居右测试文本33</td></tr><tr><td style="text-align:left">居左测试文本111</td><td style="text-align:center">居中测试文本222</td><td style="text-align:right">居右测试文本333</td></tr></tbody></table><h4 id="分隔线"><a href="#分隔线" class="headerlink" title="分隔线"></a>分隔线</h4><p>一行中用三个以上的*、-、_来建立一个分隔线，行内不能有其他东西。也可以在符号间插入空格。</p><h4 id="换行"><a href="#换行" class="headerlink" title="换行"></a>换行</h4><p>在行尾添加两个空格加回车表示换行</p><p>参考自：<a href="http://www.jianshu.com/p/82e730892d42" target="_blank" rel="external">Markdown的常用语法(个人总结)</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;注意：Markdown使用#、+、*等符号来标记， 符号后面必须跟上至少1个空格才有效！&lt;/p&gt;
&lt;h4 id=&quot;标题&quot;&gt;&lt;a href=&quot;#标题&quot; class=&quot;headerlink&quot; title=&quot;标题&quot;&gt;&lt;/a&gt;标题&lt;/h4&gt;&lt;p&gt;在Markdown当中设置标题，有两种方式：&lt;br&gt;第一种：通过在文字下方添加“=”和“-”，他们分别表示一级标题和二级标题。&lt;br&gt;第二种：在文字开头加上 “#”，通过“#”数量表示几级标题。（一共只有1~6级标题，1级标题字体最大）&lt;/p&gt;
&lt;h4 id=&quot;列表&quot;&gt;&lt;a href=&quot;#列表&quot; class=&quot;headerlink&quot; title=&quot;列表&quot;&gt;&lt;/a&gt;列表&lt;/h4&gt;&lt;p&gt;支持有序列表和无序列表&lt;/p&gt;
&lt;p&gt;无序列表使用-、+和*作为列表标记&lt;/p&gt;
&lt;p&gt;有序列表则使用数字加英文句点.来表示&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Markdown" scheme="https://ericchenwj.github.io/androidBlog/categories/Markdown/"/>
    
    
      <category term="Markdown" scheme="https://ericchenwj.github.io/androidBlog/tags/Markdown/"/>
    
  </entry>
  
  <entry>
    <title>Hexo发布博客引用自带图片的方法</title>
    <link href="https://ericchenwj.github.io/androidBlog/2017/12/15/Hexo%E5%8F%91%E5%B8%83%E5%8D%9A%E5%AE%A2%E5%BC%95%E7%94%A8%E8%87%AA%E5%B8%A6%E5%9B%BE%E7%89%87%E7%9A%84%E6%96%B9%E6%B3%95/"/>
    <id>https://ericchenwj.github.io/androidBlog/2017/12/15/Hexo发布博客引用自带图片的方法/</id>
    <published>2017-12-15T02:34:32.000Z</published>
    <updated>2017-12-15T02:48:10.358Z</updated>
    
    <content type="html"><![CDATA[<p>有两种方法，第一种是不用插件的情况，第二种是使用一种hexo的插件。无论哪种方法都有一个共同的前提：修改_config.yml配置文件post_asset_folder项为true。</p><p>创建博客必须使用命令创建：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">hexo new [layout] &lt;title&gt;</div><div class="line">其中的layout项可以省略，例如：</div><div class="line">hexo new &quot;这是一个新的博客&quot;</div></pre></td></tr></table></figure></p><p>使用完命令之后，在source/_post文件夹里面就会出现一个“这是一个新的博客.md”的文件和一个“这是一个新的博客”的文件夹。<br>下一步就是把需要的图片放到新创建的那个文件夹里面去。</p><p>最后有两种方式来引用图片：<br><a id="more"></a></p><p>第一种方法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&#123;% asset_img 这是一个新的博客的图片.jpg 这是一个新的博客的图片的说明 %&#125;</div></pre></td></tr></table></figure></p><p>用此种方法，而不是以前的<img src="" alt="">方法，前提是你的hexo的版本是hexo3以上，到package.json里面看一下吧。如果不是hexo3以上的版本，那就只能用第二种方法了：hexo插件的方法</p><p>插件的<a href="https://github.com/CodeFalling/hexo-asset-image" target="_blank" rel="external">链接</a></p><p>安装：npm install hexo-asset-image –save</p><p>之后就可以按照正常的方法使用的，比如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">我现在写了一个段落，并且想在这个段落的某一个地方[图片上传失败...(image-43fc5f-1510018038370)]引入一张图片</div></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">我现在写了一个段落，并且想在这个段落的某一个地方[图片上传失败...(image-f9b1fb-1510018038370)]引入一张图片</div></pre></td></tr></table></figure><p>此两种方法除了操作有些区别之外，在图片的显示上也略有不同，第一种的图片信息是会显示出来的，而第二种中括号里面的信息是不会显示的。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;有两种方法，第一种是不用插件的情况，第二种是使用一种hexo的插件。无论哪种方法都有一个共同的前提：修改_config.yml配置文件post_asset_folder项为true。&lt;/p&gt;
&lt;p&gt;创建博客必须使用命令创建：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;hexo new [layout] &amp;lt;title&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;其中的layout项可以省略，例如：&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;hexo new &amp;quot;这是一个新的博客&amp;quot;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;使用完命令之后，在source/_post文件夹里面就会出现一个“这是一个新的博客.md”的文件和一个“这是一个新的博客”的文件夹。&lt;br&gt;下一步就是把需要的图片放到新创建的那个文件夹里面去。&lt;/p&gt;
&lt;p&gt;最后有两种方式来引用图片：&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Hexo" scheme="https://ericchenwj.github.io/androidBlog/categories/Hexo/"/>
    
    
      <category term="Hexo" scheme="https://ericchenwj.github.io/androidBlog/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>Android Studio Git .gitignore操作</title>
    <link href="https://ericchenwj.github.io/androidBlog/2017/12/15/Android-Studio-Git-gitignore%E6%93%8D%E4%BD%9C/"/>
    <id>https://ericchenwj.github.io/androidBlog/2017/12/15/Android-Studio-Git-gitignore操作/</id>
    <published>2017-12-15T02:26:36.000Z</published>
    <updated>2017-12-15T02:31:17.775Z</updated>
    
    <content type="html"><![CDATA[<p>在push项目到GitHub的时候，忽略这些文件需要做的步骤如下：<br>  1.在项目目录下找到.gitignore文件（一般有两个地方存在该文件：一是根目录下，一是app目录下），如果没有找到该文件就创建一个 。该文件主要写明需要忽略的文件。<br>  2.对于Android项目来说，有一个标准的需要忽略的文件（当然，也可以根据自己的项目而定），在GitHub上去下载Android.gitignore文件。下面为Android.gitignore文件的内容：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line">&lt;span style=&quot;font-size:14px;&quot;&gt;# Built application files</div><div class="line">*.apk</div><div class="line">*.ap_</div><div class="line"></div><div class="line"># Files for the Dalvik VM</div><div class="line">*.dex</div><div class="line"></div><div class="line"># Java class files</div><div class="line">*.class</div><div class="line"></div><div class="line"># Generated files</div><div class="line">bin/</div><div class="line">gen/</div><div class="line">out/</div><div class="line"></div><div class="line"># Gradle files</div><div class="line">.gradle/</div><div class="line">build/</div><div class="line"></div><div class="line"># Local configuration file (sdk path, etc)</div><div class="line">local.properties</div><div class="line"></div><div class="line"># Proguard folder generated by Eclipse</div><div class="line">proguard/</div><div class="line"></div><div class="line"># Log Files</div><div class="line">*.log</div><div class="line"></div><div class="line"># Android Studio Navigation editor temp files</div><div class="line">.navigation/</div><div class="line"></div><div class="line"># Android Studio captures folder</div><div class="line">captures/</div><div class="line"></div><div class="line"># Intellij</div><div class="line">*.iml</div><div class="line"></div><div class="line"># Keystore files</div><div class="line">*.jks&lt;/span&gt;</div></pre></td></tr></table></figure></p><a id="more"></a><p>它主要的写法规则为：”#”表示注释，”*”表示通配符，可多个，”/“表示目录，”!”表示不忽略匹配到的文件或目录，”?”表示通配单个字符，”[]”表示包含单个字符的匹配列表。</p><p> 3.git命令操作</p> <img src="/androidBlog/2017/12/15/Android-Studio-Git-gitignore操作/gititnore1.png" alt="gititnore1.png" title=""> <img src="/androidBlog/2017/12/15/Android-Studio-Git-gitignore操作/gititnore2.png" alt="gititnore2.png" title=""><p>接下来只需git add. ，git commit -m “comment” ，git push就行了（注意在app目录下也有需要忽略的文件）。这样上传到GitHub上的项目就忽略了不需要进行版本控制的文件。另外，从GitHub上Download下来的这个项目，在导入Android Studio中时，应该使用Import Project。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在push项目到GitHub的时候，忽略这些文件需要做的步骤如下：&lt;br&gt;  1.在项目目录下找到.gitignore文件（一般有两个地方存在该文件：一是根目录下，一是app目录下），如果没有找到该文件就创建一个 。该文件主要写明需要忽略的文件。&lt;br&gt;  2.对于Android项目来说，有一个标准的需要忽略的文件（当然，也可以根据自己的项目而定），在GitHub上去下载Android.gitignore文件。下面为Android.gitignore文件的内容：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;24&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;25&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;26&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;27&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;28&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;29&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;30&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;31&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;32&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;33&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;34&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;35&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;36&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;37&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;38&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;39&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;span style=&amp;quot;font-size:14px;&amp;quot;&amp;gt;# Built application files&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;*.apk&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;*.ap_&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;# Files for the Dalvik VM&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;*.dex&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;# Java class files&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;*.class&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;# Generated files&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;bin/&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;gen/&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;out/&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;# Gradle files&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;.gradle/&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;build/&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;# Local configuration file (sdk path, etc)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;local.properties&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;# Proguard folder generated by Eclipse&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;proguard/&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;# Log Files&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;*.log&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;# Android Studio Navigation editor temp files&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;.navigation/&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;# Android Studio captures folder&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;captures/&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;# Intellij&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;*.iml&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;# Keystore files&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;*.jks&amp;lt;/span&amp;gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="git" scheme="https://ericchenwj.github.io/androidBlog/categories/git/"/>
    
    
      <category term="git" scheme="https://ericchenwj.github.io/androidBlog/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>git操作命令集合</title>
    <link href="https://ericchenwj.github.io/androidBlog/2017/10/30/git%E6%93%8D%E4%BD%9C%E5%91%BD%E4%BB%A4/"/>
    <id>https://ericchenwj.github.io/androidBlog/2017/10/30/git操作命令/</id>
    <published>2017-10-30T02:01:52.674Z</published>
    <updated>2017-12-18T02:14:24.745Z</updated>
    
    <content type="html"><![CDATA[<h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><p>克隆#  git clone 仓库地址<br>克隆指定分支#   git clone -b 分支名 仓库地址<br>切换到某个分支#  git branch 分支名<br>把修改文件添加到本地暂存区#  git add .<br>合并到当前分支#  git merge 分支名<br>提交修改文件#  git commit -m “修改内容”<br>更新#  git pull<br>提交到远程分支#  git push origin 分支名</p><a id="more"></a>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;常用命令&quot;&gt;&lt;a href=&quot;#常用命令&quot; class=&quot;headerlink&quot; title=&quot;常用命令&quot;&gt;&lt;/a&gt;常用命令&lt;/h3&gt;&lt;p&gt;克隆#  git clone 仓库地址&lt;br&gt;克隆指定分支#   git clone -b 分支名 仓库地址&lt;br&gt;切换到某个分支#  git branch 分支名&lt;br&gt;把修改文件添加到本地暂存区#  git add .&lt;br&gt;合并到当前分支#  git merge 分支名&lt;br&gt;提交修改文件#  git commit -m “修改内容”&lt;br&gt;更新#  git pull&lt;br&gt;提交到远程分支#  git push origin 分支名&lt;/p&gt;
    
    </summary>
    
      <category term="git" scheme="https://ericchenwj.github.io/androidBlog/categories/git/"/>
    
    
      <category term="git" scheme="https://ericchenwj.github.io/androidBlog/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>Hexo+Github搭建属于自己的博客</title>
    <link href="https://ericchenwj.github.io/androidBlog/2017/10/26/hexo%E4%BD%BF%E7%94%A8%E6%94%BB%E7%95%A5/"/>
    <id>https://ericchenwj.github.io/androidBlog/2017/10/26/hexo使用攻略/</id>
    <published>2017-10-25T16:00:00.000Z</published>
    <updated>2017-10-27T08:51:42.240Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>平时我们会写写文章，偶尔看到一些精彩的东西会做点记录，但是会经常乱放，要用到时找起来麻烦，有时会忘记放在哪了，所以想着搭建一个博客来记录这些东西，现在大家使用Hexo比较多，因此该文章主要介绍如何搭建Hexo，以及搭建过程中出现的一些问题，最后列出一些常用的命令.</p><p><a href="http://www.cnblogs.com/visugar/p/6821777.html" target="_blank" rel="external">http://www.cnblogs.com/visugar/p/6821777.html</a></p><p>常见问题：<br><a href="http://blog.csdn.net/nathan1987_/article/details/50322493" target="_blank" rel="external">http://blog.csdn.net/nathan1987_/article/details/50322493</a></p><p>使用命令：<br><a href="http://www.jianshu.com/p/3a8dba06856a" target="_blank" rel="external">http://www.jianshu.com/p/3a8dba06856a</a></p><a id="more"></a><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;平时我们会写写文章，偶尔看到一些精彩的东西会做点记录，但是会经常乱放，要用到时找起来麻烦，有时会忘记放在哪了，所以想着搭建一个博客来记录这些东西，现在大家使用Hexo比较多，因此该文章主要介绍如何搭建Hexo，以及搭建过程中出现的一些问题，最后列出一些常用的命令.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.cnblogs.com/visugar/p/6821777.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.cnblogs.com/visugar/p/6821777.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;常见问题：&lt;br&gt;&lt;a href=&quot;http://blog.csdn.net/nathan1987_/article/details/50322493&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://blog.csdn.net/nathan1987_/article/details/50322493&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;使用命令：&lt;br&gt;&lt;a href=&quot;http://www.jianshu.com/p/3a8dba06856a&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.jianshu.com/p/3a8dba06856a&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Hexo" scheme="https://ericchenwj.github.io/androidBlog/categories/Hexo/"/>
    
    
      <category term="Hexo" scheme="https://ericchenwj.github.io/androidBlog/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>系统集成项目管理工程师知识点记录</title>
    <link href="https://ericchenwj.github.io/androidBlog/2017/10/26/%E7%B3%BB%E7%BB%9F%E9%9B%86%E6%88%90%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86%E5%B7%A5%E7%A8%8B%E5%B8%88%E7%9F%A5%E8%AF%86%E7%82%B9%E8%AE%B0%E5%BD%95/"/>
    <id>https://ericchenwj.github.io/androidBlog/2017/10/26/系统集成项目管理工程师知识点记录/</id>
    <published>2017-10-25T16:00:00.000Z</published>
    <updated>2017-11-10T08:02:09.090Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1、请简要叙述合同索赔流程"><a href="#1、请简要叙述合同索赔流程" class="headerlink" title="1、请简要叙述合同索赔流程"></a>1、请简要叙述合同索赔流程</h3><ol><li>在索赔事项发生后的28天以内，以书面的索赔通知书形式向甲公司提出索赔要求；</li><li>在索赔通知书发出后的28天内，向甲公司报送补偿经济拔失的索赔报告及有关资料；</li><li>甲公司给予答复，对于不同意的，可要求乙部门进一步补充索赔理由和证据；</li><li>甲公司在收到索赔报告的有关资料后28天未予答复，表示认同索赔；</li><li>如果索赔事件持续进行时，乙部门应当阶段性向甲公司发出索赔意向，在索赔 事件终了后28天内，向甲公司送交索赔的有关资料和最终索赔报告；</li><li>甲公司或乙部门不能接受索赔结果的，可进入仲裁或诉讼程序；</li></ol><a id="more"></a><p>总结来说，就如下流程：提出索赔要求-&gt;报送索赔资料-&gt;监理工程师答复-&gt;监理工程师逾期答复后果-&gt;持续索赔-&gt;仲裁与诉讼</p><p>注意点：双方直接签证补充协议的做法是不正确的。在政府釆购法中明确要求追加项目不得超过原合总金额的10%</p><h3 id="2、简述范围变更控制的基本流程"><a href="#2、简述范围变更控制的基本流程" class="headerlink" title="2、简述范围变更控制的基本流程"></a>2、简述范围变更控制的基本流程</h3><ol><li>编写范围说明书，进行范围确认，建立基线。 </li><li>需求变更以书面的规定格式提出，提交给CCB。 </li><li>CCB对变更申请进行论证、评估，评估对项目的进度、成本、质量等影响大小。 </li><li>需求变更以书面的方式获得通过，并修改进度计划、成本计划等，未获通过的给出原因。</li><li>分派给项目组进行变更的实施。并通知所有相关干系人。</li><li>监督并控制变更的实施过程，处理产生的问题。 </li><li>定期评估变更对项目绩效的影响，作为历史数据归入组织过程资产，有利于以后的评估准确。</li></ol><p>注意：对范围变更进行控制是，要以工作分解结构、项目进展报告、变更请求和范围管理计划为依据。进行范围变更控制必须经过范围变更控制系统。</p><p>根据项目范围变更的流程，首先要提出项目变更请求，然后由项目利益相关人根据变更对项目影响（时间、成本等）进行决策变更，决定是否接受变更。如果不接受变更，则反馈给变更请求人，并说明不接受的原因。如果接受变更，则需要按照变更的流程，更新相应的计划和文档，实施范围变更。最后应对变更进行评审。</p><p>成本变更控制系统公司一种项目成本控制的程序性方法，主要通过建立项目成本变更控制体系对项目成本进行控制。该系统主要包括3个部分，分别是成本变更申请、批准成本变更申请和变更项目成本预算。</p><h3 id="3、项目可行性研究的主要步骤"><a href="#3、项目可行性研究的主要步骤" class="headerlink" title="3、项目可行性研究的主要步骤"></a>3、项目可行性研究的主要步骤</h3><ol><li>初步可行性研究</li><li>详细可行性研究</li><li>项目综合论证</li><li>项目可行性评估</li><li>项目可行性研究报告编写、提交和获得批准</li></ol><h3 id="4、关键路径分析和总时差、自由时差计算"><a href="#4、关键路径分析和总时差、自由时差计算" class="headerlink" title="4、关键路径分析和总时差、自由时差计算"></a>4、关键路径分析和总时差、自由时差计算</h3><p>详细知识请参考：<a href="http://blog.csdn.net/moshengtan/article/details/13001751" target="_blank" rel="external">http://blog.csdn.net/moshengtan/article/details/13001751</a></p><p>如何计算ES,EF,LS,LF？<br>前推法来计算最早时间   某一活动的最早开始时间（ES）=指向它的所有紧前活动的最早结束时间的最大值。   某一活动的最早结束时间（EF）=ES+T（作业时间）  逆推法来计算最迟时间   某一活动的最迟结束时间（LF）=指向它的所有紧后活动的最迟开始时间的最小值。   某一活动的最迟开始时间（LS）=LF-T（作业时间）</p><p>总时差与自由时差的区别？<br>总时差是指在不延误项目完成日期或违反进度因素的前提下，某活动可以推迟的时间。  总时差=LS-ES=LF-EF<br>自由时差是指在不影响紧后活动最早开始的情况下，当前活动可以推迟的时间。   自由时差=(后一活动)ES-(前一活动的)EF    所以总时差影响总工期，自由时差影响紧后活动。</p><p>计算关键路径的步骤：</p><ol><li>用有方向的线段标出各结点的紧前活动和紧后活动的关系，使之成为一个有方向的网络图（PDM）   </li><li>用正推和逆推法计算出各个活动的ES,LS,EF,LF，并计算出各个活动的自由时差。找出所有总时差为零或为负的活动，就是关键活动。  </li><li>关键路径上的活动持续时间决定了项目的工期，总和就是项目工期。</li></ol><h3 id="5、信息系统工程监理活动的主要内容括"><a href="#5、信息系统工程监理活动的主要内容括" class="headerlink" title="5、信息系统工程监理活动的主要内容括"></a>5、信息系统工程监理活动的主要内容括</h3><p>“四控、三管、一协调”：<br>四控：进度控制、质量控制、成本控制、变更控制<br>三管：合同管理、安全管理、文档管理<br>一协调：沟通与协调业主、承建方、设备和材料供应商之间的关系</p><h3 id="6、信息系统集成项目的验收工作步骤"><a href="#6、信息系统集成项目的验收工作步骤" class="headerlink" title="6、信息系统集成项目的验收工作步骤"></a>6、信息系统集成项目的验收工作步骤</h3><p>系统测试 -&gt; 系统的试运行  -&gt; 系统的文档验收  -&gt; 项目的最终验收报告</p><h3 id="7、招标文件"><a href="#7、招标文件" class="headerlink" title="7、招标文件"></a>7、招标文件</h3><p>招标文件应当包括招标项目的技术要求、对投标人资格审查的标准、投标报价要求和评标标准等所有实质性要求和条件，以及拟签订合同的主要条款。</p><h3 id="8、项目范围管理活动"><a href="#8、项目范围管理活动" class="headerlink" title="8、项目范围管理活动"></a>8、项目范围管理活动</h3><p>编制范围管理计划、范围定义、创建工作分解结构、范围确认、范围控制</p><h3 id="9、挣值管理法中的PV、EV、AC、SV、CV、SPI、CPI"><a href="#9、挣值管理法中的PV、EV、AC、SV、CV、SPI、CPI" class="headerlink" title="9、挣值管理法中的PV、EV、AC、SV、CV、SPI、CPI"></a>9、挣值管理法中的PV、EV、AC、SV、CV、SPI、CPI</h3><p>PV：计划值，在即定时间点前计划完成活动或WBS组件工作的预算成本。<br>    记忆技巧：PLaned，计划，Value，数值，简写是PV </p><p>AC：实际成本，在即定时间段内实比分完成工作发生的实际总成本。<br>    记忆技巧：Actual，实际的，cost，成本，简写是AC </p><p>EV：挣值，在即定时间段内实际完工工作的预算成本。<br>    记忆技巧：Earn，挣，Value，数值，简写的EV</p><p> 以下以公式中，以S开头的缩写，都是表示进度的，schedule。以C开头的缩写，都是表示成本的，cost。而且有一个规律，计算公式都是EV开头；偏差是用减法，即然是减法，那么肯定也是跟0比较；指数是用除法，那么也肯定是跟1比较。</p><p> 进度偏差SV＝EV－PV，即然是进度方面的偏差，计算的肯定是进度方面的内容，那么上面两个参数PV、AC那个是跟进度有关系呢？肯定是PV计划值了，所以公式SV＝EV－PV的记忆就出来了。SV&gt;0，进度超前，SV&lt;0，进度落后。 </p><p> 成本偏差CV＝EV－AC，同上道理，成本方面的偏差，计算的也肯定是成本方面的内容，那么上面两个参数PV、AC那个是跟成本有关系的呢？肯定是AC实际成本了。所以公式CV＝EV－AC的记忆也出来了。CV&gt;0，成本节约，CV&lt;0，成本超支。 </p><p> 进度绩效指数SPI＝EV/PV，也好理解了，S开头的缩写，肯定是关于进度方面指数了，公式以EV作为开头的，SPI＝1，进度与计划相符，SPI&gt;1，进度超前，SPI&lt;1，进度落后。</p><p> 成本绩效指数CPI＝EV/AC，C开头的缩写，关于成本方面指数，公式以EV开头，CPI＝1，资金使用效率一般；CPI&gt;1成本节约，资金使用效率高；CPI&lt;1，成本超支，资金使用效率低。</p><h3 id="10、项目成本管理的过程"><a href="#10、项目成本管理的过程" class="headerlink" title="10、项目成本管理的过程"></a>10、项目成本管理的过程</h3><p> 制定成本管理计划、成本估算、成本预算、成本控制</p><h3 id="11、质量的定义"><a href="#11、质量的定义" class="headerlink" title="11、质量的定义"></a>11、质量的定义</h3><p> 国际标准化组织： 反应实体满足主体明确和隐含需求的能力的特性总和；<br> 国家标准：一组固有特性满足要求的程度<br> 从用户角度：质量是对一个产品（包括相关的服务）满足程度的度量，是产品或服务的生命</p><h3 id="12、项目人力资源管理的过程"><a href="#12、项目人力资源管理的过程" class="headerlink" title="12、项目人力资源管理的过程"></a>12、项目人力资源管理的过程</h3><p> 1、编制人力资源计划<br> 2、组建项目团队<br> 3、建设项目团队<br> 4、管理项目团队</p><h3 id="13、项目整体管理的主要过程"><a href="#13、项目整体管理的主要过程" class="headerlink" title="13、项目整体管理的主要过程"></a>13、项目整体管理的主要过程</h3><p>项目整体管理师项目管理中一项综合性盒全局性的管理工作。项目整体管理知识域包括保证项目各要素相互协调所需要的各个过程。具体地讲，项目整体管理知识域包括标识、定义、结合、统一和协调项目管理过程组中的不同过程和活动所需要的过程和活动。项目整体管理应确保项目所有的组成要素在正确的时间结合在一起，以成功完成项目。<br>  项目整体管理与其他的项目单项管理（如项目进度管理、项目成本管理等）相比，具有综合性、全局性和系统性的特点。<br>  项目管理中整体管理的过程包括制定项目章程、制定项目范围说明书（初步）、制定项目管理计划、指导和管理项目执行、监督和控制项目工作、整体变更控制、项目收尾。</p><h3 id="14、项目计划过程"><a href="#14、项目计划过程" class="headerlink" title="14、项目计划过程"></a>14、项目计划过程</h3><p>项目规划—范围定义—活动定义—活动历时估算<br>项目范围管理包括的过程依序排列为范围计划制定（或称范围规划）、范围定义、创建工作分解结构、范围核实、范围变更控制。<br>  项目时间管理包括的过程排列为活动定义、活动排序、活动资源估算、活动历时估算、制定进度计划、进度计划控制。<br>  一般情况下，应先确定项目的范围，然后再此基础上再对项目的时间进行管理。 </p><h3 id="15"><a href="#15" class="headerlink" title="15"></a>15</h3><p>项目范围说明书包括项目和范围的目标、产品或服务的需求的特性、项目的边界、产品接受标准、项目约束条件、项目假设、最初的项目组织、最初定的风险、进度里程碑、费用估算的量级要求、项目配置管理的需求已批准的需求。</p><h3 id="16"><a href="#16" class="headerlink" title="16"></a>16</h3><p> 项目范围管理计划是范围计划编制过程的一个输出，规定了如何定义、检验、控制范围和创建与定义WBS，指导项目管理团队应如何管理项目的范围。<br> WBS是组织管理工作的主要依据，是项目管理工作的基础。这些项目管理工作包括定义工作范围、定义项目组织、设定项目产品的质量和规格、估算和控制费用以及估算时间周期和安排进度，因此，这些项目管理工作也是创建WBS的目标。WBS分解越准确，对进度和成本的估算也就越准确，越能促进明确分工。同时，WBS和WBS字典构成了项目的范围基线。<br> WBS具有以下4个用途：<br> 1、WBS是一个描述思路的规划和设计工具，能够帮助项目经理和项目团队确定和有效地管理项目的工作。<br> 2、WBS是一个清晰地表示各项目工作之间的相互联系的结构设计工具。<br> 3、WBS是一个展现项目全貌，并且详细说明了为完成项目所必须完成的各项工作的计划工具。<br> 4、WBS定义的里程碑事件，可以向高级管理层和客户报告项目的完成情况，是项目状况的报告工具</p><h3 id="17-项目进度网络图"><a href="#17-项目进度网络图" class="headerlink" title="17 项目进度网络图"></a>17 项目进度网络图</h3><p>项目进度控制的过程大致为活动定义、活动排序、活动资源估算、活动历时估算、进度计划的制定、进度控制<br>在项目管理中，首先通过对项目活动进行排序，得到项目进度网络图。再根据项目进度网络图找到项目的关键路径，从而制定项目的进度计划。由此可见，项目进度网络图是活动排序的结果和进度计划编制的输入。</p><h3 id="18"><a href="#18" class="headerlink" title="18"></a>18</h3><p>缩短项目进度的技术主要如下：<br>1、变更项目范围：主要是指缩小项目的范围<br>2、赶工：是一种通过分配很多的资源，达到以成本的最低增加和进度的最大限度压缩的目的，它不改变活动之间的顺序。<br>3、快速追踪：也叫快速跟进，是指并行或重叠执行原来计划串行执行的活动，会改变工作网络图原来的顺序</p><h3 id="19"><a href="#19" class="headerlink" title="19"></a>19</h3><p>一般来说，项目活动间存在以下4个依赖关系。<br>1、结束—开始（FS型）：某活动必须结束，另一活动才能开始<br>2、结束—结束（FF型）：某活动结束前，另一活动必须结束<br>3、开始—结束（SF型）：某活动结束前另一活动必须开始<br>4、开始—开始（SS型）：某活动必须在另一活动开始前开始</p><p>在某个信息系统项目中，存在新老系统切换问题。在设置项目计划网络图时，新系统上线和老系统下线之间应设置成开始-结束的关系</p><h3 id="20-活动的期望时间"><a href="#20-活动的期望时间" class="headerlink" title="20 活动的期望时间"></a>20 活动的期望时间</h3><p>活动的期望时间=（最乐观时间+4*最可能时间+最悲观时间）/6</p><h3 id="21"><a href="#21" class="headerlink" title="21"></a>21</h3><p>管理项目团队是项目人力资源管理的内容之一，其工具及技术包括如下内容：观察和对话、项目绩效评估、冲突管理、问题日志</p><h3 id="22"><a href="#22" class="headerlink" title="22"></a>22</h3><p>《中华人民共和国合同法》第五十二条规定，有下列情形之一的，合同无效：<br>1、一方以欺诈、胁迫的手段订立合同，损害国家利益的；<br>2、恶意串通，损害国家、集体或者第三人利益的<br>3、以合法形式掩盖非法目的的；<br>4、损害社会公共利益的<br>5、违反法律、行政法规的强制性规定的</p><h3 id="23-应对风险的3项基本原则"><a href="#23-应对风险的3项基本原则" class="headerlink" title="23 应对风险的3项基本原则"></a>23 应对风险的3项基本原则</h3><p>规避、接受、减轻</p><p>在项目风险管理的基本流程中，包括以下6项主要活动<br>编制风险管理计划：确定项目中风险管理活动的步骤<br>识别风险：确定项目中可能存在的风险<br>风险定性分析：通过对风险的发生概率和潜在影响排定风险的优先级，作为后续分析的准备<br>风险定量分析：量化风险分析对项目目标的影响<br>编制风险应对策略：制定相应的策略，减轻风险对项目目标的影响<br>风险跟踪和监控：跟踪并监控识别出的风险，执行风险应对策略，并评估其再整个项目生命周期中的效果<br>风险规避措施是编制风险应对计划的一项输出，不属于风险管理基本流程中的活动。</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;1、请简要叙述合同索赔流程&quot;&gt;&lt;a href=&quot;#1、请简要叙述合同索赔流程&quot; class=&quot;headerlink&quot; title=&quot;1、请简要叙述合同索赔流程&quot;&gt;&lt;/a&gt;1、请简要叙述合同索赔流程&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;在索赔事项发生后的28天以内，以书面的索赔通知书形式向甲公司提出索赔要求；&lt;/li&gt;
&lt;li&gt;在索赔通知书发出后的28天内，向甲公司报送补偿经济拔失的索赔报告及有关资料；&lt;/li&gt;
&lt;li&gt;甲公司给予答复，对于不同意的，可要求乙部门进一步补充索赔理由和证据；&lt;/li&gt;
&lt;li&gt;甲公司在收到索赔报告的有关资料后28天未予答复，表示认同索赔；&lt;/li&gt;
&lt;li&gt;如果索赔事件持续进行时，乙部门应当阶段性向甲公司发出索赔意向，在索赔 事件终了后28天内，向甲公司送交索赔的有关资料和最终索赔报告；&lt;/li&gt;
&lt;li&gt;甲公司或乙部门不能接受索赔结果的，可进入仲裁或诉讼程序；&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="系统集成项目管理工程师" scheme="https://ericchenwj.github.io/androidBlog/categories/%E7%B3%BB%E7%BB%9F%E9%9B%86%E6%88%90%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86%E5%B7%A5%E7%A8%8B%E5%B8%88/"/>
    
    
      <category term="系统集成项目管理工程师" scheme="https://ericchenwj.github.io/androidBlog/tags/%E7%B3%BB%E7%BB%9F%E9%9B%86%E6%88%90%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86%E5%B7%A5%E7%A8%8B%E5%B8%88/"/>
    
  </entry>
  
</feed>
